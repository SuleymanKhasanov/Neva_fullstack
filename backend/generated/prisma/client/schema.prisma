// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Section {
  NEVA
  X_SOLUTION
}

enum Locale {
  ru
  en
  uz
  kr
}

// Основная таблица брендов
model Brand {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  translations      BrandTranslation[]
  products          Product[]
  subcategoryBrands SubcategoryBrand[]

  @@map("brands")
}

// Переводы брендов
model BrandTranslation {
  id        Int      @id @default(autoincrement())
  brandId   Int      @map("brand_id")
  locale    Locale
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, locale])
  @@map("brand_translations")
}

// Основная таблица категорий
model Category {
  id        Int      @id @default(autoincrement())
  section   Section
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  translations  CategoryTranslation[]
  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

// Переводы категорий
model CategoryTranslation {
  id         Int      @id @default(autoincrement())
  categoryId Int      @map("category_id")
  locale     Locale
  name       String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Связи
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@map("category_translations")
}

// Основная таблица субкатегорий
model Subcategory {
  id         Int      @id @default(autoincrement())
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Связи
  category          Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations      SubcategoryTranslation[]
  products          Product[]
  subcategoryBrands SubcategoryBrand[]

  @@map("subcategories")
}

// Переводы субкатегорий
model SubcategoryTranslation {
  id            Int      @id @default(autoincrement())
  subcategoryId Int      @map("subcategory_id")
  locale        Locale
  name          String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([subcategoryId, locale])
  @@map("subcategory_translations")
}

// Связь между субкатегориями и брендами (многие ко многим)
model SubcategoryBrand {
  id            Int      @id @default(autoincrement())
  subcategoryId Int      @map("subcategory_id")
  brandId       Int      @map("brand_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([subcategoryId, brandId])
  @@map("subcategory_brands")
}

// Основная таблица продуктов
model Product {
  id            Int      @id @default(autoincrement())
  sku           String   @unique @db.VarChar(100)
  categoryId    Int      @map("category_id")
  subcategoryId Int?     @map("subcategory_id")
  brandId       Int?     @map("brand_id")
  section       Section
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  category       Category?              @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?           @relation(fields: [subcategoryId], references: [id])
  brand          Brand?                 @relation(fields: [brandId], references: [id])
  translations   ProductTranslation[]
  specifications ProductSpecification[]
  images         ProductImage[]

  @@map("products")
}

// Переводы продуктов
model ProductTranslation {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  locale      Locale
  name        String   @db.VarChar(500)
  description String?  @db.Text
  shortDesc   String?  @map("short_desc") @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, locale])
  @@map("product_translations")
}

// Характеристики продуктов
model ProductSpecification {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  key       String   @db.VarChar(255)
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

// Изображения продуктов
model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  url       String   @db.VarChar(500)
  alt       String?  @db.VarChar(255)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Пользователи (администраторы)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      String   @default("admin") @db.VarChar(50)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}
