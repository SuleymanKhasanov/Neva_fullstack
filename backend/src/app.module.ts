// src/app.module.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
import { join } from 'path';

import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { CacheModule } from '@nestjs/cache-manager';
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { APP_GUARD } from '@nestjs/core';
import { GraphQLModule } from '@nestjs/graphql';
import { ServeStaticModule } from '@nestjs/serve-static';
import * as redisStore from 'cache-manager-redis-store';

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import { AdminModule } from './admin/admin.module';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { AuthModule } from './auth/auth.module';
import { JwtAuthGuard } from './auth/guards/jwt-auth.guard';
import { CommonModule } from './common/common.module';
import { PublicModule } from './public/public.module';

@Module({
  imports: [
    // ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: ['.env.local', '.env'],
    }),

    // ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï (Redis) ====================
    CacheModule.registerAsync({
      isGlobal: true,
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService) => ({
        store: redisStore,
        host: configService.get('REDIS_HOST', 'redis'),
        port: parseInt(configService.get('REDIS_PORT', '6379')),
        ttl: parseInt(configService.get('CACHE_TTL', '300')),
        max: parseInt(configService.get('CACHE_MAX_ITEMS', '1000')),
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        lazyConnect: true,
      }),
      inject: [ConfigService],
    }),

    // ==================== GRAPHQL ====================
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
      sortSchema: true,
      playground: process.env.NODE_ENV !== 'production',
      introspection: true,
      context: ({ req, res }: { req?: any; res?: any }) => ({
        req: req || {},
        res: res || {},
      }),
      formatError: (error) => {
        console.error('GraphQL Error:', error);

        return {
          message: error.message,
          code: error.extensions?.code || 'INTERNAL_SERVER_ERROR',
          path: error.path,
        };
      },
    }),

    // ==================== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ====================
    ServeStaticModule.forRoot({
      rootPath: join(process.cwd(), 'public'),
      serveRoot: '/public',
      serveStaticOptions: {
        cacheControl: true,
        maxAge: 86400000, // 24 —á–∞—Å–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      },
    }),

    // ==================== –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

    // –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–µ—à, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
    CommonModule,

    // JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    AuthModule,

    // –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ products + categories + brands)
    PublicModule,

    // –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –¥–æ–º–µ–Ω–∞–º)
    AdminModule,
  ],

  controllers: [AppController],
  providers: [
    AppService,
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π JWT Guard - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—â–∏—â–∞–µ—Ç –≤—Å–µ —Ä–æ—É—Ç—ã –∫—Ä–æ–º–µ @Public
    {
      provide: APP_GUARD,
      useClass: JwtAuthGuard,
    },
  ],
})
export class AppModule {
  constructor(private configService: ConfigService) {
    const environment = this.configService.get('NODE_ENV', 'development');
    const port = this.configService.get('PORT', 3000);

    console.log(
      'üöÄ Neva Backend v2.1 - Clean Architecture (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)'
    );
    console.log(`üìã Environment: ${environment}`);
    console.log(`üåê Port: ${port}`);
    console.log('');
    console.log('üéØ –ß–∏—Å—Ç—ã–µ –º–æ–¥—É–ª–∏ (—É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ):');
    console.log('  üõ†Ô∏è  CommonModule   - –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã (DB, Cache, Upload)');
    console.log('  üîê  AuthModule     - JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    console.log(
      '  üåê  PublicModule   - –í–µ—Å—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ (REST + GraphQL)'
    );
    console.log('  üîí  AdminModule    - –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)');
    console.log('');
    console.log('üåê –ü—É–±–ª–∏—á–Ω—ã–µ API (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):');
    console.log(
      '  GET  /api/products              - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏'
    );
    console.log(
      '  GET  /api/products/:id          - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞'
    );
    console.log(
      '  GET  /api/categories            - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'
    );
    console.log('  GET  /api/brands                - –ë—Ä–µ–Ω–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π');
    console.log('  GET  /api/search                - –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É');
    console.log('  GET  /api/menu                  - –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    console.log('');
    console.log('üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ API (—Ç—Ä–µ–±—É—é—Ç JWT):');
    console.log('  üì¶  /admin/products/*           - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏');
    console.log('  üè∑Ô∏è  /admin/categories/*         - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏');
    console.log('  üè¢  /admin/brands/*             - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞–º–∏');
    console.log('  üîß  /admin/system/*             - –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('');
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:');
    console.log('  POST /auth/login                - –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
    console.log('  POST /auth/refresh              - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
    console.log('  GET  /auth/profile              - –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('');
    console.log('üéØ GraphQL:');
    console.log('  üìä  /graphql                    - GraphQL Playground');
    console.log('  üìñ  /api-docs                   - Swagger UI');
    console.log('');
    console.log('üíæ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log('  üêò  PostgreSQL                 - –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('  üî¥  Redis                       - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('  üîß  Adminer                     - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ë–î');
    console.log('');
    console.log('‚úÖ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:');
    console.log('  ‚ùå products/ + product/         ‚Üí ‚úÖ public/ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)');
    console.log(
      '  ‚ùå categories/ + enhanced/      ‚Üí ‚úÖ public/ (—Ç–æ–ª—å–∫–æ enhanced)'
    );
    console.log('  ‚ùå 6+ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤   ‚Üí ‚úÖ 4 –ª–æ–≥–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã');
    console.log('  ‚ùå legacy + enhanced –≤–µ—Ä—Å–∏–∏    ‚Üí ‚úÖ —Ç–æ–ª—å–∫–æ enhanced');
    console.log('');
    console.log('üéâ –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!');
  }
}
