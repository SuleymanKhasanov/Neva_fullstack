// backend/src/auth/guards/jwt-auth.guard.ts
import {
  Injectable,
  ExecutionContext,
  UnauthorizedException,
  Logger,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { AuthGuard } from '@nestjs/passport';
import { GqlExecutionContext } from '@nestjs/graphql';
import { Observable } from 'rxjs';

import { IS_PUBLIC_KEY } from '../decorators/public.decorator';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  private readonly logger = new Logger(JwtAuthGuard.name);

  constructor(private reflector: Reflector) {
    super();
  }

  canActivate(
    context: ExecutionContext
  ): boolean | Promise<boolean> | Observable<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    if (isPublic) {
      this.logger.debug(
        `üåê Public route accessed: ${this.getRouteInfo(context)}`
      );

      return true;
    }

    this.logger.log(
      `üîê Protected route accessed: ${this.getRouteInfo(context)}`
    );

    return super.canActivate(context);
  }

  handleRequest(err: any, user: any, info: any, context: ExecutionContext) {
    const request = this.getRequest(context);
    const route = request
      ? `${request.method || 'GraphQL'} ${request.url || 'GraphQL'}`
      : 'GraphQL';

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
    this.logger.log(`JWT Auth attempt for ${route}`);

    if (err) {
      this.logger.error(`JWT Auth error for ${route}:`, err.message);
      throw err;
    }

    if (!user) {
      const errorMessage = info?.message || 'No auth token';
      this.logger.warn(`JWT Auth failed: ${errorMessage}`);
      throw new UnauthorizedException('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    this.logger.log(`JWT Auth success for admin: ${user.username}`);

    return user;
  }

  private getRouteInfo(context: ExecutionContext): string {
    const request = this.getRequest(context);

    if (!request) {
      return 'GraphQL';
    }

    return `${request.method || 'GraphQL'} ${request.url || 'GraphQL'}`;
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GraphQL –∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  getRequest(context: ExecutionContext) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ GraphQL –∏–ª–∏ HTTP –∑–∞–ø—Ä–æ—Å
      const gqlContext = GqlExecutionContext.create(context);
      return gqlContext.getContext().req;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ GraphQL, –ø—Ä–æ–±—É–µ–º HTTP
      try {
        return context.switchToHttp().getRequest();
      } catch {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        return {};
      }
    }
  }
}
