// backend/scripts/parse-catalog-json.ts
import { readFileSync } from 'fs';
import { join } from 'path';

import { PrismaClient, Section, Locale } from '@prisma/client';

interface CatalogData {
  categories: {
    id: number;
    name: {
      ru: string;
      en: string;
      uz: string;
      ko: string;
    };
    subcategories: {
      id: number;
      name: {
        ru: string;
        en: string;
        uz: string;
        ko: string;
      };
      brands: string[];
    }[];
  }[];
}

class CatalogParser {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async parseCatalog(): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ JSON...');

    try {
      // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
      const filePath = join(process.cwd(), 'data', 'catalog_json.json');
      const jsonData = readFileSync(filePath, 'utf-8');
      const catalogData: CatalogData = JSON.parse(jsonData);

      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${catalogData.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`
      );

      // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (process.argv.includes('--clean')) {
        await this.cleanExistingData();
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const categoryData of catalogData.categories) {
        await this.processCategory(categoryData);
      }

      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      throw error;
    } finally {
      await this.prisma.$disconnect();
    }
  }

  private async cleanExistingData(): Promise<void> {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

    await this.prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –±—Ä–µ–Ω–¥–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      await tx.categoryBrand.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await tx.productSpecificationTranslation.deleteMany();

      // –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await tx.productSpecification.deleteMany();

      // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await tx.productImage.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await tx.productTranslation.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      await tx.product.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±—Ä–µ–Ω–¥–æ–≤
      await tx.brandTranslation.deleteMany();

      // –£–¥–∞–ª—è–µ–º –±—Ä–µ–Ω–¥—ã
      await tx.brand.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π
      await tx.subcategoryTranslation.deleteMany();

      // –£–¥–∞–ª—è–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await tx.subcategory.deleteMany();

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      await tx.categoryTranslation.deleteMany();

      // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await tx.category.deleteMany();
    });

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  }

  private async processCategory(categoryData: any): Promise<void> {
    console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryData.name.ru}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
    const section: Section = this.determineSectionById(categoryData.id);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await this.prisma.category.create({
      data: {
        id: categoryData.id,
        section: section,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await this.createCategoryTranslations(category.id, categoryData.name);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const subcategoryData of categoryData.subcategories) {
      await this.processSubcategory(category.id, subcategoryData, section);
    }

    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name.ru}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
  }

  private async createCategoryTranslations(
    categoryId: number,
    names: any
  ): Promise<void> {
    const locales: Locale[] = ['ru', 'en', 'uz', 'kr'];

    for (const locale of locales) {
      if (names[locale]) {
        await this.prisma.categoryTranslation.create({
          data: {
            categoryId,
            locale,
            name: names[locale],
          },
        });
      }
    }
  }

  private async processSubcategory(
    categoryId: number,
    subcategoryData: any,
    section: Section
  ): Promise<void> {
    console.log(`  üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${subcategoryData.name.ru}`);

    // –°–æ–∑–¥–∞–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const subcategory = await this.prisma.subcategory.create({
      data: {
        id: subcategoryData.id,
        categoryId,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await this.createSubcategoryTranslations(
      subcategory.id,
      subcategoryData.name
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã
    if (subcategoryData.brands && subcategoryData.brands.length > 0) {
      await this.processBrands(categoryId, subcategoryData.brands, section);
    }

    console.log(`  ‚úÖ –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è "${subcategoryData.name.ru}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
  }

  private async createSubcategoryTranslations(
    subcategoryId: number,
    names: any
  ): Promise<void> {
    const locales: Locale[] = ['ru', 'en', 'uz', 'kr'];

    for (const locale of locales) {
      if (names[locale]) {
        await this.prisma.subcategoryTranslation.create({
          data: {
            subcategoryId,
            locale,
            name: names[locale],
          },
        });
      }
    }
  }

  private async processBrands(
    categoryId: number,
    brandNames: string[],
    section: Section
  ): Promise<void> {
    console.log(`    üè∑Ô∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${brandNames.length} –±—Ä–µ–Ω–¥–æ–≤`);

    for (const brandName of brandNames) {
      await this.processBrand(categoryId, brandName, section);
    }
  }

  private async processBrand(
    categoryId: number,
    brandName: string,
    section: Section
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±—Ä–µ–Ω–¥
    let brand = await this.prisma.brand.findFirst({
      where: {
        translations: {
          some: {
            name: brandName,
            locale: 'ru', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
          },
        },
      },
    });

    if (!brand) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
      brand = await this.prisma.brand.create({
        data: {},
      });

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±—Ä–µ–Ω–¥–∞ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
      await this.createBrandTranslations(brand.id, brandName);
    }

    // –°–≤—è–∑—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    const existingLink = await this.prisma.categoryBrand.findUnique({
      where: {
        categoryId_brandId_section: {
          categoryId,
          brandId: brand.id,
          section,
        },
      },
    });

    if (!existingLink) {
      await this.prisma.categoryBrand.create({
        data: {
          categoryId,
          brandId: brand.id,
          section,
        },
      });
    }

    console.log(`    ‚úÖ –ë—Ä–µ–Ω–¥ "${brandName}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
  }

  private async createBrandTranslations(
    brandId: number,
    brandName: string
  ): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    const locales: Locale[] = ['ru', 'en', 'uz', 'kr'];

    for (const locale of locales) {
      await this.prisma.brandTranslation.create({
        data: {
          brandId,
          locale,
          name: brandName, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–æ–≤
        },
      });
    }
  }

  private determineSectionById(categoryId: number): Section {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

    // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ ID –æ—Ç 1 –¥–æ 10 - NEVA, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - X_SOLUTION
    if (categoryId <= 10) {
      return Section.NEVA;
    } else {
      return Section.X_SOLUTION;
    }
  }

  async getStats(): Promise<void> {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');

    const stats = await Promise.all([
      this.prisma.category.count(),
      this.prisma.subcategory.count(),
      this.prisma.brand.count(),
      this.prisma.categoryBrand.count(),
      this.prisma.categoryTranslation.count(),
      this.prisma.subcategoryTranslation.count(),
      this.prisma.brandTranslation.count(),
    ]);

    console.log(`üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[0]}`);
    console.log(`üìÇ –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[1]}`);
    console.log(`üè∑Ô∏è  –ë—Ä–µ–Ω–¥–æ–≤: ${stats[2]}`);
    console.log(`üîó –°–≤—è–∑–µ–π –±—Ä–µ–Ω–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${stats[3]}`);
    console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[4]}`);
    console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[5]}`);
    console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –±—Ä–µ–Ω–¥–æ–≤: ${stats[6]}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const parser = new CatalogParser();

  try {
    // –ü–∞—Ä—Å–∏–º –∫–∞—Ç–∞–ª–æ–≥
    await parser.parseCatalog();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await parser.getStats();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ JSON');
  console.log('üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log(
    '  yarn catalog:parse           - –ü–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
  );
  console.log(
    '  yarn catalog:parse:clean     - –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π\n'
  );

  main()
    .then(() => {
      console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}
