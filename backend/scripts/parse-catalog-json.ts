import * as fs from 'fs/promises';
import * as path from 'path';

import { PrismaClient, Section, Locale } from '@prisma/client';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
interface CatalogData {
  categories: CategoryData[];
}

interface CategoryData {
  id: number;
  name: Record<string, string>;
  subcategories: SubcategoryData[];
}

interface SubcategoryData {
  id: number;
  name: Record<string, string>;
  brands: string[];
}

const prisma = new PrismaClient();

async function importCatalog() {
  try {
    // –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ data (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ)
    const rawData = await fs.readFile(
      path.join(__dirname, '../data/catalog_json.json'),
      'utf-8'
    );
    const data: CatalogData = JSON.parse(rawData);

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏
    const locales: Locale[] = ['ru', 'en', 'uz', 'kr'];

    // –°–µ–∫—Ü–∏–∏ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sections: Section[] = [Section.NEVA, Section.X_SOLUTION];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π
    for (const section of sections) {
      console.log(`–ò–º–ø–æ—Ä—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏: ${section}`);

      for (const category of data.categories) {
        // –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
        // –î–ª—è NEVA –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID, –¥–ª—è X_SOLUTION –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        const categoryId =
          section === Section.NEVA ? category.id : category.id + 10000; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è X_SOLUTION

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryRecord = await prisma.category.upsert({
          where: { id: categoryId },
          update: {
            section: section,
          },
          create: {
            id: categoryId,
            section: section,
          },
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (const locale of locales) {
          if (category.name[locale]) {
            await prisma.categoryTranslation.upsert({
              where: {
                categoryId_locale: {
                  categoryId: categoryId,
                  locale: locale as Locale,
                },
              },
              update: {
                name: category.name[locale],
              },
              create: {
                categoryId: categoryId,
                locale: locale as Locale,
                name: category.name[locale],
              },
            });
          }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (const subcategory of category.subcategories) {
          // –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const subcategoryId =
            section === Section.NEVA ? subcategory.id : subcategory.id + 10000; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è X_SOLUTION

          // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const subcategoryRecord = await prisma.subcategory.upsert({
            where: { id: subcategoryId },
            update: {
              categoryId: categoryId,
            },
            create: {
              id: subcategoryId,
              categoryId: categoryId,
            },
          });

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          for (const locale of locales) {
            if (subcategory.name[locale]) {
              await prisma.subcategoryTranslation.upsert({
                where: {
                  subcategoryId_locale: {
                    subcategoryId: subcategoryId,
                    locale: locale as Locale,
                  },
                },
                update: {
                  name: subcategory.name[locale],
                },
                create: {
                  subcategoryId: subcategoryId,
                  locale: locale as Locale,
                  name: subcategory.name[locale],
                },
              });
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–æ–≤
          for (const brandName of subcategory.brands) {
            // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
            let existingBrand = await prisma.brand.findFirst({
              where: {
                translations: {
                  some: {
                    locale: Locale.ru,
                    name: brandName,
                  },
                },
              },
              include: {
                translations: true,
              },
            });

            let brand;

            if (existingBrand) {
              // –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
              brand = existingBrand;
            } else {
              // –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
              brand = await prisma.brand.create({
                data: {
                  translations: {
                    create: locales.map((locale) => ({
                      locale,
                      name: brandName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –∏–º—è –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π
                    })),
                  },
                },
              });
            }

            // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
            await prisma.categoryBrand.upsert({
              where: {
                categoryId_brandId_section: {
                  categoryId: categoryId,
                  brandId: brand.id,
                  section: section,
                },
              },
              update: {},
              create: {
                categoryId: categoryId,
                brandId: brand.id,
                section: section,
              },
            });
          }
        }
      }
    }

    console.log('–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é - —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async function importCatalogDeprecated() {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞—Ä–µ–ª!');
  console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ: npm run catalog:parse:admin');
  console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
  console.log(
    'üì¶ –ü—É–±–ª–∏—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º'
  );

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
importCatalogDeprecated().catch((e) => {
  console.error(e);
  process.exit(1);
});
