// backend/prisma/seed.ts
import * as fs from 'fs';
import * as path from 'path';

import { PrismaClient, Section, Locale } from '../generated/prisma/client';

const prisma = new PrismaClient();

// –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const categoryTranslations: Record<string, Record<Locale, string>> = {
  '–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
    ru: '–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    en: 'Server Equipment',
    uz: 'Server uskunalari',
    kr: 'ÏÑúÎ≤Ñ Ïû•ÎπÑ',
  },
  '–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
    ru: '–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    en: 'Network Equipment',
    uz: 'Tarmoq uskunalari',
    kr: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•ÎπÑ',
  },
  '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è': {
    ru: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è',
    en: 'Computers & Peripherals',
    uz: 'Kompyuterlar va periferiya',
    kr: 'Ïª¥Ìì®ÌÑ∞ Î∞è Ï£ºÎ≥ÄÍ∏∞Í∏∞',
  },
  '–ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è': {
    ru: '–ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
    en: 'Surveillance Cameras',
    uz: 'Kuzatuv kameralari',
    kr: 'Í∞êÏãú Ïπ¥Î©îÎùº',
  },
  '–§–∞–π—Ä–≤–æ–ª—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': {
    ru: '–§–∞–π—Ä–≤–æ–ª—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    en: 'Firewalls & Security',
    uz: 'Firewall va xavfsizlik',
    kr: 'Î∞©ÌôîÎ≤Ω Î∞è Î≥¥Ïïà',
  },
  '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ': {
    ru: '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    en: 'Software',
    uz: 'Dasturiy ta ºminot',
    kr: 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥',
  },
  '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è –∏ —Å–≤—è–∑—å': {
    ru: '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è –∏ —Å–≤—è–∑—å',
    en: 'Telephony & Communications',
    uz: 'Telefoniya va aloqa',
    kr: 'Ï†ÑÌôî ÌÜµÏã†',
  },
  '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': {
    ru: '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    en: 'Consumables',
    uz: 'Sarflanuvchi materiallar',
    kr: 'ÏÜåÎ™®Ìíà',
  },
  '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': {
    ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    en: 'Electronics & Accessories',
    uz: 'Elektronika va aksessuarlar',
    kr: 'Ï†ÑÏûêÏ†úÌíà Î∞è Ïï°ÏÑ∏ÏÑúÎ¶¨',
  },
  '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
    ru: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    en: 'Tools & Equipment',
    uz: 'Asboblar va jihozlar',
    kr: 'ÎèÑÍµ¨ Î∞è Ïû•ÎπÑ',
  },
  –ú–µ–±–µ–ª—å: {
    ru: '–ú–µ–±–µ–ª—å',
    en: 'Furniture',
    uz: 'Mebel',
    kr: 'Í∞ÄÍµ¨',
  },
  –ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã: {
    ru: '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã',
    en: 'Office Supplies',
    uz: 'Kantselyariya tovarlari',
    kr: 'ÏÇ¨Î¨¥Ïö©Ìíà',
  },
  '–ß–∏—Å—Ç–æ—Ç–∞ –∏ –≥–∏–≥–∏–µ–Ω–∞': {
    ru: '–ß–∏—Å—Ç–æ—Ç–∞ –∏ –≥–∏–≥–∏–µ–Ω–∞',
    en: 'Cleaning & Hygiene',
    uz: 'Tozalik va gigiena',
    kr: 'Ï≤≠ÏÜå Î∞è ÏúÑÏÉù',
  },
  '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': {
    ru: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    en: 'Home Appliances',
    uz: 'Maishiy texnika',
    kr: 'Í∞ÄÏ†ÑÏ†úÌíà',
  },
  –û—Å–≤–µ—â–µ–Ω–∏–µ: {
    ru: '–û—Å–≤–µ—â–µ–Ω–∏–µ',
    en: 'Lighting',
    uz: 'Yoritish',
    kr: 'Ï°∞Î™Ö',
  },
  '–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞': {
    ru: '–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞',
    en: 'Access Control Systems',
    uz: 'Kirish nazorati tizimlari',
    kr: 'Ï∂úÏûÖ ÌÜµÏ†ú ÏãúÏä§ÌÖú',
  },
  '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
    ru: '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    en: 'Climate Equipment',
    uz: 'Iqlim uskunalari',
    kr: 'Í∏∞ÌõÑ Ïû•ÎπÑ',
  },
};

const subcategoryTranslations: Record<string, Record<Locale, string>> = {
  –°–µ—Ä–≤–µ—Ä—ã: {
    ru: '–°–µ—Ä–≤–µ—Ä—ã',
    en: 'Servers',
    uz: 'Serverlar',
    kr: 'ÏÑúÎ≤Ñ',
  },
  '–°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö': {
    ru: '–°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
    en: 'Data Storage Systems',
    uz: 'Ma ºlumotlarni saqlash tizimlari',
    kr: 'Îç∞Ïù¥ÌÑ∞ Ïä§ÌÜ†Î¶¨ÏßÄ ÏãúÏä§ÌÖú',
  },
  'HCI (–≥–∏–ø–µ—Ä–∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ç–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)': {
    ru: 'HCI (–≥–∏–ø–µ—Ä–∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ç–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)',
    en: 'HCI (Hyperconverged Infrastructure)',
    uz: 'HCI (Giperkonvergent infratuzilma)',
    kr: 'HCI (ÌïòÏù¥ÌçºÏª®Î≤ÑÏßÄÎìú Ïù∏ÌîÑÎùº)',
  },
  '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': {
    ru: '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    en: 'Server Accessories',
    uz: 'Server aksessuarlari',
    kr: 'ÏÑúÎ≤Ñ Ïï°ÏÑ∏ÏÑúÎ¶¨',
  },
  '–°—Ç–æ–π–∫–∏ –∏ —à–∫–∞—Ñ—ã': {
    ru: '–°—Ç–æ–π–∫–∏ –∏ —à–∫–∞—Ñ—ã',
    en: 'Racks & Cabinets',
    uz: 'Stendlar va shkaflar',
    kr: 'Îûô Î∞è Ï∫êÎπÑÎãõ',
  },
  –ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã: {
    ru: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã',
    en: 'Switches',
    uz: 'Kommutatorlar',
    kr: 'Ïä§ÏúÑÏπò',
  },
  –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã: {
    ru: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã',
    en: 'Routers',
    uz: 'Marshrutizatorlar',
    kr: 'ÎùºÏö∞ÌÑ∞',
  },
  '–¢–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ Wi-Fi': {
    ru: '–¢–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ Wi-Fi',
    en: 'Wi-Fi Access Points',
    uz: 'Wi-Fi kirish nuqtalari',
    kr: 'Wi-Fi Ïï°ÏÑ∏Ïä§ Ìè¨Ïù∏Ìä∏',
  },
  '–°–µ—Ç–µ–≤—ã–µ –∫–∞–±–µ–ª–∏': {
    ru: '–°–µ—Ç–µ–≤—ã–µ –∫–∞–±–µ–ª–∏',
    en: 'Network Cables',
    uz: 'Tarmoq kabellari',
    kr: 'ÎÑ§Ìä∏ÏõåÌÅ¨ ÏºÄÏù¥Î∏î',
  },
  '–ü–∞—Ç—á-–ø–∞–Ω–µ–ª–∏': {
    ru: '–ü–∞—Ç—á-–ø–∞–Ω–µ–ª–∏',
    en: 'Patch Panels',
    uz: 'Patch panellar',
    kr: 'Ìå®Ïπò Ìå®ÎÑê',
  },
  '–°–µ—Ç–µ–≤—ã–µ —Ä–æ–∑–µ—Ç–∫–∏': {
    ru: '–°–µ—Ç–µ–≤—ã–µ —Ä–æ–∑–µ—Ç–∫–∏',
    en: 'Network Outlets',
    uz: 'Tarmoq rozetkalar',
    kr: 'ÎÑ§Ìä∏ÏõåÌÅ¨ ÏΩòÏÑºÌä∏',
  },
  // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
};

interface CategoryData {
  category: string;
  subcategory: string;
  brand: string;
}

async function parseMarkdownData(): Promise<CategoryData[]> {
  const filePath = path.join(__dirname, '..', 'categories_with_brands.md');
  const content = fs.readFileSync(filePath, 'utf-8');

  const lines = content.split('\n');
  const data: CategoryData[] = [];

  lines.forEach((line) => {
    if (
      line.startsWith('|') &&
      !line.startsWith('| **–ö–∞—Ç–µ–≥–æ—Ä–∏—è**') &&
      line.includes('|')
    ) {
      const parts = line
        .split('|')
        .map((part) => part.trim())
        .filter((part) => part !== '');
      if (parts.length >= 3) {
        const [category, subcategory, brand] = parts;
        data.push({
          category: category.replace(/\*\*/g, ''), // –£–±–∏—Ä–∞–µ–º markdown
          subcategory: subcategory.replace(/\*\*/g, ''),
          brand: brand.replace(/\*\*/g, ''),
        });
      }
    }
  });

  return data;
}

async function seedDatabase() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.subcategoryBrand.deleteMany();
    await prisma.subcategoryTranslation.deleteMany();
    await prisma.subcategory.deleteMany();
    await prisma.categoryTranslation.deleteMany();
    await prisma.category.deleteMany();
    await prisma.brandTranslation.deleteMany();
    await prisma.brand.deleteMany();

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ markdown
    const data = await parseMarkdownData();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const categories = new Set(data.map((item) => item.category));
    const subcategoriesMap = new Map<string, Set<string>>();
    const brandsMap = new Map<string, Set<string>>();

    data.forEach((item) => {
      if (!subcategoriesMap.has(item.category)) {
        subcategoriesMap.set(item.category, new Set());
      }
      subcategoriesMap.get(item.category)!.add(item.subcategory);

      const subcategoryKey = `${item.category}:${item.subcategory}`;
      if (!brandsMap.has(subcategoryKey)) {
        brandsMap.set(subcategoryKey, new Set());
      }
      brandsMap.get(subcategoryKey)!.add(item.brand);
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const categoryMap = new Map<string, number>();

    for (const categoryName of categories) {
      const category = await prisma.category.create({
        data: {
          section: Section.NEVA,
          translations: {
            create: Object.entries(
              categoryTranslations[categoryName] || {
                ru: categoryName,
                en: categoryName,
                uz: categoryName,
                kr: categoryName,
              }
            ).map(([locale, name]) => ({
              locale: locale as Locale,
              name,
            })),
          },
        },
      });
      categoryMap.set(categoryName, category.id);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName} (ID: ${category.id})`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const subcategoryMap = new Map<string, number>();

    for (const [categoryName, subcategoryNames] of subcategoriesMap) {
      const categoryId = categoryMap.get(categoryName)!;

      for (const subcategoryName of subcategoryNames) {
        const subcategory = await prisma.subcategory.create({
          data: {
            categoryId,
            translations: {
              create: Object.entries(
                subcategoryTranslations[subcategoryName] || {
                  ru: subcategoryName,
                  en: subcategoryName,
                  uz: subcategoryName,
                  kr: subcategoryName,
                }
              ).map(([locale, name]) => ({
                locale: locale as Locale,
                name,
              })),
            },
          },
        });

        const subcategoryKey = `${categoryName}:${subcategoryName}`;
        subcategoryMap.set(subcategoryKey, subcategory.id);
        console.log(
          `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${subcategoryName} (ID: ${subcategory.id})`
        );
      }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏ —Å–≤—è–∑–µ–π
    console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏ —Å–≤—è–∑–µ–π...');
    const brandMap = new Map<string, number>();

    for (const [subcategoryKey, brandNames] of brandsMap) {
      const subcategoryId = subcategoryMap.get(subcategoryKey)!;

      for (const brandName of brandNames) {
        let brandId = brandMap.get(brandName);

        if (!brandId) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
          const brand = await prisma.brand.create({
            data: {
              translations: {
                create: [
                  { locale: Locale.ru, name: brandName },
                  { locale: Locale.en, name: brandName },
                  { locale: Locale.uz, name: brandName },
                  { locale: Locale.kr, name: brandName },
                ],
              },
            },
          });
          brandId = brand.id;
          brandMap.set(brandName, brandId);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—Ä–µ–Ω–¥: ${brandName} (ID: ${brandId})`);
        }

        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è-–±—Ä–µ–Ω–¥
        await prisma.subcategoryBrand.create({
          data: {
            subcategoryId,
            brandId,
          },
        });
      }
    }

    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.size}`);
    console.log(`   - –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategoryMap.size}`);
    console.log(`   - –ë—Ä–µ–Ω–¥–æ–≤: ${brandMap.size}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedDatabase().catch((error) => {
    console.error(error);
    process.exit(1);
  });
}

export { seedDatabase };
