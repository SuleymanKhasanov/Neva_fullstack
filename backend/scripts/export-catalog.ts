// backend/scripts/export-catalog.ts
import { writeFileSync } from 'fs';
import { join } from 'path';

import { PrismaClient } from '@prisma/client';

class CatalogExporter {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async exportCatalog(): Promise<void> {
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ JSON...');

    try {
      const catalogData = await this.buildCatalogStructure();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      const outputPath = join(process.cwd(), 'data', 'exported_catalog.json');
      writeFileSync(outputPath, JSON.stringify(catalogData, null, 2), 'utf-8');

      console.log(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: ${outputPath}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.printExportStats(catalogData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      throw error;
    } finally {
      await this.prisma.$disconnect();
    }
  }

  private async buildCatalogStructure(): Promise<any> {
    console.log('üîÑ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    const categories = await this.prisma.category.findMany({
      include: {
        translations: true,
        subcategories: {
          include: {
            translations: true,
          },
          orderBy: { id: 'asc' },
        },
        categoryBrands: {
          include: {
            brand: {
              include: {
                translations: {
                  where: { locale: 'ru' }, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
                },
              },
            },
          },
        },
      },
      orderBy: { id: 'asc' },
    });

    return {
      categories: categories.map((category) => {
        // –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryName: any = {};
        ['ru', 'en', 'uz', 'ko'].forEach((locale) => {
          const translation = category.translations.find(
            (t) => t.locale === locale
          );
          if (translation) {
            categoryName[locale] = translation.name;
          }
        });

        // –°–æ–±–∏—Ä–∞–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const subcategories = category.subcategories.map((sub) => {
          // –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const subName: any = {};
          ['ru', 'en', 'uz', 'ko'].forEach((locale) => {
            const translation = sub.translations.find(
              (t) => t.locale === locale
            );
            if (translation) {
              subName[locale] = translation.name;
            }
          });

          // –°–æ–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const brands = category.categoryBrands
            .filter((cb) => cb.brand.translations.length > 0)
            .map((cb) => cb.brand.translations[0].name)
            .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

          return {
            id: sub.id,
            name: subName,
            brands: brands,
          };
        });

        return {
          id: category.id,
          name: categoryName,
          subcategories: subcategories,
        };
      }),
    };
  }

  private async printExportStats(catalogData: any): Promise<void> {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');

    const categoriesCount = catalogData.categories.length;
    let subcategoriesCount = 0;
    let brandsSet = new Set<string>();
    let translationsCount = 0;

    catalogData.categories.forEach((category: any) => {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      translationsCount += Object.keys(category.name).length;

      category.subcategories.forEach((sub: any) => {
        subcategoriesCount++;
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        translationsCount += Object.keys(sub.name).length;

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        sub.brands.forEach((brand: string) => brandsSet.add(brand));
      });
    });

    console.log(`üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesCount}`);
    console.log(`üìÇ –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategoriesCount}`);
    console.log(`üè∑Ô∏è  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: ${brandsSet.size}`);
    console.log(`üåê –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationsCount}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∫—Ü–∏—è–º
    const nevaCategories = catalogData.categories.filter(
      (c: any) => c.id <= 10
    );
    const xSolutionCategories = catalogData.categories.filter(
      (c: any) => c.id > 10
    );

    console.log(`\nüìã –ü–æ —Å–µ–∫—Ü–∏—è–º:`);
    console.log(`  üÖ∞Ô∏è NEVA: ${nevaCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    console.log(`  üÖ±Ô∏è X_SOLUTION: ${xSolutionCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
  }

  async validateExportedData(): Promise<boolean> {
    console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
      const dbStats = await Promise.all([
        this.prisma.category.count(),
        this.prisma.subcategory.count(),
        this.prisma.brand.count(),
      ]);

      console.log(
        `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í –ë–î: ${dbStats[0]} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${dbStats[1]} —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${dbStats[2]} –±—Ä–µ–Ω–¥–æ–≤`
      );

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);

      return false;
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const exporter = new CatalogExporter();

  try {
    await exporter.exportCatalog();
    await exporter.validateExportedData();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üì§ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ JSON');
  console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: data/exported_catalog.json\n');

  main()
    .then(() => {
      console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}
