// backend/scripts/seed-from-json.ts
import * as fs from 'fs';
import * as path from 'path';

import { PrismaClient, Section, Locale } from '../generated/prisma/client';

const prisma = new PrismaClient();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
interface CategoryName {
  ru: string;
  en: string;
  uz: string;
  ko: string;
}

interface SubcategoryJson {
  id: number;
  name: CategoryName;
  brands: string[];
}

interface CategoryJson {
  id: number;
  name: CategoryName;
  subcategories: SubcategoryJson[];
}

interface CatalogData {
  categories: CategoryJson[];
}

// –ú–∞–ø–ø–∏–Ω–≥ –ª–æ–∫–∞–ª–µ–π –∏–∑ JSON –≤ Prisma enum
const localeMapping: Record<string, Locale> = {
  ru: Locale.ru,
  en: Locale.en,
  uz: Locale.uz,
  ko: Locale.kr, // –í JSON 'ko', –≤ Prisma 'kr'
};

async function loadJsonData(): Promise<CatalogData> {
  try {
    const jsonPath = path.join(__dirname, '..', '..', 'catalog_json.json');
    const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
    const data: CatalogData = JSON.parse(jsonContent);

    console.log(`üìÅ JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${data.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

async function clearExistingData(): Promise<void> {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è foreign keys)
    await prisma.subcategoryBrand.deleteMany();
    await prisma.productSpecificationTranslation.deleteMany();
    await prisma.productSpecification.deleteMany();
    await prisma.productImage.deleteMany();
    await prisma.productTranslation.deleteMany();
    await prisma.product.deleteMany();
    await prisma.subcategoryTranslation.deleteMany();
    await prisma.subcategory.deleteMany();
    await prisma.categoryBrand.deleteMany();
    await prisma.categoryTranslation.deleteMany();
    await prisma.category.deleteMany();
    await prisma.brandTranslation.deleteMany();
    await prisma.brand.deleteMany();

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function createCategories(
  catalogData: CatalogData
): Promise<Map<number, number>> {
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  const categoryIdMap = new Map<number, number>(); // JSON ID -> DB ID

  for (const categoryJson of catalogData.categories) {
    try {
      const category = await prisma.category.create({
        data: {
          section: Section.NEVA, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é NEVA, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
          translations: {
            create: Object.entries(categoryJson.name)
              .map(([locale, name]) => ({
                locale: localeMapping[locale],
                name: name.trim(),
              }))
              .filter((t) => t.locale), // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ª–æ–∫–∞–ª–∏
          },
        },
      });

      categoryIdMap.set(categoryJson.id, category.id);
      console.log(
        `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${categoryJson.name.ru} (JSON ID: ${categoryJson.id} -> DB ID: ${category.id})`
      );
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryJson.name.ru}:`,
        error
      );
    }
  }

  return categoryIdMap;
}

async function createSubcategories(
  catalogData: CatalogData,
  categoryIdMap: Map<number, number>
): Promise<Map<number, number>> {
  console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  const subcategoryIdMap = new Map<number, number>(); // JSON ID -> DB ID

  for (const categoryJson of catalogData.categories) {
    const categoryDbId = categoryIdMap.get(categoryJson.id);
    if (!categoryDbId) {
      console.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å JSON ID ${categoryJson.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      continue;
    }

    for (const subcategoryJson of categoryJson.subcategories) {
      try {
        const subcategory = await prisma.subcategory.create({
          data: {
            categoryId: categoryDbId,
            translations: {
              create: Object.entries(subcategoryJson.name)
                .map(([locale, name]) => ({
                  locale: localeMapping[locale],
                  name: name.trim(),
                }))
                .filter((t) => t.locale),
            },
          },
        });

        subcategoryIdMap.set(subcategoryJson.id, subcategory.id);
        console.log(
          `‚úÖ –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${subcategoryJson.name.ru} (JSON ID: ${subcategoryJson.id} -> DB ID: ${subcategory.id})`
        );
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${subcategoryJson.name.ru}:`,
          error
        );
      }
    }
  }

  return subcategoryIdMap;
}

async function createBrands(
  catalogData: CatalogData
): Promise<Map<string, number>> {
  console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...');
  const brandNameToIdMap = new Map<string, number>(); // Brand name -> DB ID

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
  const allBrands = new Set<string>();
  for (const categoryJson of catalogData.categories) {
    for (const subcategoryJson of categoryJson.subcategories) {
      subcategoryJson.brands.forEach((brand) => {
        if (brand && brand.trim()) {
          allBrands.add(brand.trim());
        }
      });
    }
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allBrands.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤`);

  for (const brandName of allBrands) {
    try {
      const brand = await prisma.brand.create({
        data: {
          translations: {
            create: [
              { locale: Locale.ru, name: brandName },
              { locale: Locale.en, name: brandName },
              { locale: Locale.uz, name: brandName },
              { locale: Locale.kr, name: brandName },
            ],
          },
        },
      });

      brandNameToIdMap.set(brandName, brand.id);
      console.log(`‚úÖ –ë—Ä–µ–Ω–¥ —Å–æ–∑–¥–∞–Ω: ${brandName} (DB ID: ${brand.id})`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ ${brandName}:`, error);
    }
  }

  return brandNameToIdMap;
}

async function createSubcategoryBrandRelations(
  catalogData: CatalogData,
  subcategoryIdMap: Map<number, number>,
  brandNameToIdMap: Map<string, number>
): Promise<void> {
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è-–±—Ä–µ–Ω–¥...');
  let relationsCreated = 0;

  for (const categoryJson of catalogData.categories) {
    for (const subcategoryJson of categoryJson.subcategories) {
      const subcategoryDbId = subcategoryIdMap.get(subcategoryJson.id);
      if (!subcategoryDbId) {
        console.warn(
          `‚ö†Ô∏è –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å JSON ID ${subcategoryJson.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
        );
        continue;
      }

      for (const brandName of subcategoryJson.brands) {
        if (!brandName || !brandName.trim()) continue;

        const brandDbId = brandNameToIdMap.get(brandName.trim());
        if (!brandDbId) {
          console.warn(`‚ö†Ô∏è –ë—Ä–µ–Ω–¥ ${brandName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        try {
          await prisma.subcategoryBrand.create({
            data: {
              subcategoryId: subcategoryDbId,
              brandId: brandDbId,
            },
          });
          relationsCreated++;
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è-–±—Ä–µ–Ω–¥ (${subcategoryJson.name.ru} - ${brandName}):`,
            error
          );
        }
      }
    }
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${relationsCreated} —Å–≤—è–∑–µ–π —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è-–±—Ä–µ–Ω–¥`);
}

async function seedFromJson(): Promise<void> {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON...');
  console.log('=====================================');

  try {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    const catalogData = await loadJsonData();

    // 2. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await clearExistingData();

    // 3. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryIdMap = await createCategories(catalogData);

    // 4. –°–æ–∑–¥–∞–µ–º —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const subcategoryIdMap = await createSubcategories(
      catalogData,
      categoryIdMap
    );

    // 5. –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥—ã
    const brandNameToIdMap = await createBrands(catalogData);

    // 6. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è-–±—Ä–µ–Ω–¥
    await createSubcategoryBrandRelations(
      catalogData,
      subcategoryIdMap,
      brandNameToIdMap
    );

    console.log('');
    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('=====================================');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryIdMap.size}`);
    console.log(`   - –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategoryIdMap.size}`);
    console.log(`   - –ë—Ä–µ–Ω–¥–æ–≤: ${brandNameToIdMap.size}`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
    const [categoriesCount, subcategoriesCount, brandsCount, relationsCount] =
      await Promise.all([
        prisma.category.count(),
        prisma.subcategory.count(),
        prisma.brand.count(),
        prisma.subcategoryBrand.count(),
      ]);

    console.log('');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î:');
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${categoriesCount}`);
    console.log(`   - –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${subcategoriesCount}`);
    console.log(`   - –ë—Ä–µ–Ω–¥–æ–≤ –≤ –ë–î: ${brandsCount}`);
    console.log(`   - –°–≤—è–∑–µ–π –≤ –ë–î: ${relationsCount}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedFromJson().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { seedFromJson };
