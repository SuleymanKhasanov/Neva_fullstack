'use client';

import React from 'react';
import { CustomSelect } from '@/shared/ui/CustomSelect/CustomSelect';
import {
  useCategoryOptions,
  useSubcategoryOptions,
  useBrandOptions,
  useFormData,
  useIsFormValid,
  useSelectedSection,
  useSelectedCategory,
  useSelectedSubcategory,
  useSelectedBrand,
  useLoading,
  useError,
  useAdminCategoryActions,
  type FormData,
} from '@/shared/store/adminCategoryStore';
import styles from './AdminCreateCategory.module.css';

// ==================== –°–¢–†–û–ì–ò–ï –¢–ò–ü–´ ====================

interface SelectOption {
  readonly value: string | number;
  readonly label: string;
}

interface AdminCreateCategoryProps {
  readonly onFormChange?: (isValid: boolean, data: FormData) => void;
}

// ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================

const SECTION_OPTIONS: readonly SelectOption[] = [
  { value: 'NEVA', label: 'Neva' },
  { value: 'X_SOLUTION', label: 'X-Solution' },
] as const;

// ==================== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ ====================

const AdminCreateCategory: React.FC<AdminCreateCategoryProps> = ({
  onFormChange,
}) => {
  // ==================== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ó STORE ====================

  // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const selectedSubcategory = useSelectedSubcategory();
  const selectedBrand = useSelectedBrand();

  // –î–∞–Ω–Ω—ã–µ
  const categoryOptions: SelectOption[] = useCategoryOptions();
  const subcategoryOptions: SelectOption[] = useSubcategoryOptions();
  const brandOptions: SelectOption[] = useBrandOptions();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const loading = useLoading();
  const error = useError();

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const formData: FormData = useFormData();
  const isFormValid: boolean = useIsFormValid();

  // –î–µ–π—Å—Ç–≤–∏—è
  const {
    setSelectedSection,
    setSelectedCategory,
    setSelectedSubcategory,
    setSelectedBrand,
    clearError,
  } = useAdminCategoryActions();

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

  const handleSectionChange = React.useCallback(
    (value: string | number): void => {
      console.log('üìù –°–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞:', value);
      const sectionValue = typeof value === 'string' ? value : String(value);
      setSelectedSection(sectionValue);
      clearError();
    },
    [setSelectedSection, clearError]
  );

  const handleCategoryChange = React.useCallback(
    (value: string | number): void => {
      console.log('üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞:', value);
      const categoryId =
        typeof value === 'number' ? value : parseInt(String(value), 10);
      if (!isNaN(categoryId)) {
        setSelectedCategory(categoryId);
        clearError();
      }
    },
    [setSelectedCategory, clearError]
  );

  const handleSubcategoryChange = React.useCallback(
    (value: string | number): void => {
      console.log('üìù –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞:', value);
      const subcategoryId =
        typeof value === 'number' ? value : parseInt(String(value), 10);
      if (!isNaN(subcategoryId)) {
        setSelectedSubcategory(subcategoryId);
        clearError();
      }
    },
    [setSelectedSubcategory, clearError]
  );

  const handleBrandChange = React.useCallback(
    (value: string | number): void => {
      console.log('üìù –ë—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω:', value);
      const brandId =
        typeof value === 'number' ? value : parseInt(String(value), 10);
      if (!isNaN(brandId)) {
        setSelectedBrand(brandId);
        clearError();
      }
    },
    [setSelectedBrand, clearError]
  );

  const handleErrorDismiss = React.useCallback((): void => {
    clearError();
  }, [clearError]);

  // ==================== –≠–§–§–ï–ö–¢–´ ====================

  React.useEffect(() => {
    if (onFormChange) {
      onFormChange(isFormValid, formData);
    }
  }, [onFormChange, isFormValid, formData]);

  // ==================== –ü–û–ú–û–©–ù–ò–ö–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê ====================

  const getPlaceholder = React.useCallback(
    (
      isLoading: boolean,
      hasPrerequisite: boolean,
      loadingText: string,
      normalText: string,
      prerequisiteText: string
    ): string => {
      if (isLoading) return loadingText;
      if (!hasPrerequisite) return prerequisiteText;
      return normalText;
    },
    []
  );

  // ==================== –†–ï–ù–î–ï–† ====================

  return (
    <div className={styles.container}>
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
      {error && (
        <div className={styles.error}>
          <span>‚ö†Ô∏è {error}</span>
          <button
            type="button"
            onClick={handleErrorDismiss}
            className={styles.errorClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É"
          >
            ‚úï
          </button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –≤ –≤–∏–¥–µ –≥—Ä–∏–¥–æ–≤ 2x2 */}
      <div className={styles.formGrid}>
        {/* –°–µ–∫—Ü–∏—è */}
        <div className={styles.fieldContainer}>
          <CustomSelect
            label="–°–µ–∫—Ü–∏—è *"
            options={SECTION_OPTIONS}
            value={selectedSection}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é"
            onChange={handleSectionChange}
          />
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div className={styles.fieldContainer}>
          <CustomSelect
            label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è *"
            options={categoryOptions}
            value={selectedCategory ?? ''}
            placeholder={getPlaceholder(
              loading.categories,
              Boolean(selectedSection),
              '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...',
              '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
              '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é'
            )}
            disabled={!selectedSection || loading.categories}
            onChange={handleCategoryChange}
          />
        </div>

        {/* –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div className={styles.fieldContainer}>
          <CustomSelect
            label="–°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            options={subcategoryOptions}
            value={selectedSubcategory ?? ''}
            placeholder={getPlaceholder(
              loading.subcategories,
              Boolean(selectedCategory),
              '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π...',
              subcategoryOptions.length > 0
                ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                : '–°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
              '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
            )}
            disabled={!selectedCategory || loading.subcategories}
            onChange={handleSubcategoryChange}
          />
        </div>

        {/* –ë—Ä–µ–Ω–¥ */}
        <div className={styles.fieldContainer}>
          <CustomSelect
            label="–ë—Ä–µ–Ω–¥"
            options={brandOptions}
            value={selectedBrand ?? ''}
            placeholder={getPlaceholder(
              loading.brands,
              Boolean(selectedSubcategory),
              '–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...',
              brandOptions.length > 0 ? '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥' : '–ë—Ä–µ–Ω–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
              '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
            )}
            disabled={!selectedSubcategory || loading.brands}
            onChange={handleBrandChange}
          />
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {(loading.categories || loading.subcategories || loading.brands) && (
        <div className={styles.loadingIndicator}>
          <div className={styles.spinner} />
          <span>
            –ó–∞–≥—Ä—É–∑–∫–∞ {loading.categories && '–∫–∞—Ç–µ–≥–æ—Ä–∏–π'}
            {loading.subcategories && '—Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π'}
            {loading.brands && '–±—Ä–µ–Ω–¥–æ–≤'}
            ...
          </span>
        </div>
      )}
    </div>
  );
};

export default AdminCreateCategory;
