// frontend/src/widgets/ProductCreateForm/model/useProductForm.ts
// ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

'use client';

import { useState, useCallback } from 'react';
import { ProductFormData } from '../ui/ProductCreateForm';

interface FormErrors {
  [key: string]: string;
}

const INITIAL_FORM_DATA: ProductFormData = {
  section: null,
  categoryId: null,
  subcategoryId: null,
  brandId: null,
  name: '',
  images: [],
  description: '',
  specifications: '',
};

export const useProductForm = () => {
  const [formData, setFormData] = useState<ProductFormData>(INITIAL_FORM_DATA);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);
  const [isDirty, setIsDirty] = useState(false);
  const [lastSaved] = useState<number>(0); // –ü–æ–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

  // ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const updateFormData = useCallback((updates: Partial<ProductFormData>) => {
    setFormData((prev) => ({ ...prev, ...updates }));
    setIsDirty(true);

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const updatedFields = Object.keys(updates);
    if (updatedFields.length > 0) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        updatedFields.forEach((field) => {
          delete newErrors[field];
        });
        return newErrors;
      });
    }
  }, []);

  // ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  const validateForm = useCallback((): boolean => {
    const newErrors: FormErrors = {};

    if (!formData.section) {
      newErrors.section = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é';
    }
    if (!formData.categoryId) {
      newErrors.categoryId = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    }
    if (!formData.brandId) {
      newErrors.brandId = '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥';
    }
    if (!formData.name.trim()) {
      newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞';
    }
    if (formData.images.length === 0) {
      newErrors.images = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    }
    if (!formData.description.trim()) {
      newErrors.description = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  // ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
  const submitForm = useCallback(async () => {
    if (isLoading) return;

    if (!validateForm()) {
      console.warn('Form validation failed');
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
      console.log('üì§ Submitting form data:', formData);

      await new Promise((resolve) => setTimeout(resolve, 2000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      alert('–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! (–¥–µ–º–æ —Ä–µ–∂–∏–º)');

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData(INITIAL_FORM_DATA);
      setIsDirty(false);
    } catch (error) {
      console.error('‚ùå Submit error:', error);
      setErrors({ general: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞' });
    } finally {
      setIsLoading(false);
    }
  }, [formData, isLoading, validateForm]);

  // ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–æ–π —Å–±—Ä–æ—Å
  const resetForm = useCallback(() => {
    setFormData(INITIAL_FORM_DATA);
    setErrors({});
    setIsDirty(false);
  }, []);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    formData,
    errors,
    isLoading,
    isDirty,
    lastSaved,

    // –§—É–Ω–∫—Ü–∏–∏
    updateFormData,
    validateForm,
    submitForm,
    resetForm,
  };
};
