// shared/services/api/product.ts

import {
  ProductDetail,
  ProductApiResponse,
  AllProductsApiResponse,
  ProductPath,
} from '@/shared/types/product';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export async function getProductById(
  id: string,
  locale: string
): Promise<ProductDetail | null> {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
    const url = `${baseUrl}/product/${locale}/${id}`;

    console.log('üîç Fetching product:', { id, locale, url });

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ISR
      next: {
        revalidate: 3600, // Revalidate –∫–∞–∂–¥—ã–π —á–∞—Å
        tags: [`product-${id}`, `locale-${locale}`],
      },
    });

    if (!response.ok) {
      console.error('‚ùå Product fetch failed:', {
        status: response.status,
        statusText: response.statusText,
        url,
      });

      if (response.status === 404) {
        return null; // –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
      }

      throw new Error(
        `HTTP error! status: ${response.status}, statusText: ${response.statusText}`
      );
    }

    const responseText = await response.text();
    console.log('üìù Raw response:', responseText);

    let data: ProductApiResponse;
    try {
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      console.error('‚ùå Response text:', responseText);
      throw new Error('Invalid JSON response from server');
    }

    if (!data.success || !data.data) {
      console.error('‚ùå Invalid product response:', data);
      return null;
    }

    console.log('‚úÖ Product fetched successfully:', data.data.name);
    return data.data;
  } catch (error) {
    console.error('üí• Error fetching product:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π
 */
export async function getAllProductPaths(): Promise<ProductPath[]> {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
    const locales = ['en', 'ru', 'uz', 'kr'];
    const allPaths: ProductPath[] = [];

    for (const locale of locales) {
      const url = `${baseUrl}/products/all/${locale}`;

      console.log(`üîç Fetching all products for locale: ${locale}`);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏
        next: {
          revalidate: 86400, // 24 —á–∞—Å–∞
        },
      });

      if (response.ok) {
        const responseText = await response.text();
        const data: AllProductsApiResponse = JSON.parse(responseText);

        if (data.success && data.data.products) {
          data.data.products.forEach((product: ProductDetail) => {
            allPaths.push({
              locale,
              id: product.id.toString(),
              slug: product.slug,
            });
          });
        }
      } else {
        console.warn(
          `‚ö†Ô∏è Failed to fetch products for locale ${locale}:`,
          response.status
        );
      }
    }

    console.log(`üìä Generated ${allPaths.length} product paths`);
    return allPaths;
  } catch (error) {
    console.error('üí• Error fetching all product paths:', error);
    return [];
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ SEO-friendly slug
 */
export function createSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    .trim();
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ slug
 */
export function validateSlug(productSlug: string, urlSlug: string): boolean {
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º slug –∏–∑ API —Å slug –∏–∑ URL
  return productSlug === urlSlug;
}
