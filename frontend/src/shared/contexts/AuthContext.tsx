'use client';

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
  useCallback,
} from 'react';
import { TranslationType, TranslationKeys } from '@/shared/config/i18n/types';

interface User {
  username: string;
  role: string;
}

// –¢–∏–ø—ã –¥–ª—è –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface LoginError {
  type: 'INVALID_CREDENTIALS' | 'SERVER_ERROR' | 'NETWORK_ERROR';
  message: string;
  details?: string; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
}

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface LoginResponse {
  access_token?: string;
  refresh_token?: string;
  user?: User;
  message?: string;
  error?: string;
}

interface RefreshResponse {
  access_token?: string;
  message?: string;
}

interface AuthContextType {
  user: User | null;
  accessToken: string | null;
  refreshToken: string | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  locale: string;
  messages: TranslationType | null;
  login: (
    username: string,
    password: string
  ) => Promise<{ success: boolean; error?: LoginError }>;
  logout: () => Promise<void>;
  refreshAuth: () => Promise<boolean>;
  t: (key: string, params?: Record<string, string>) => string;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
  baseUrl?: string;
  locale: string;
  messages: TranslationType;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({
  children,
  baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000',
  locale,
  messages,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [refreshToken, setRefreshToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const isAuthenticated = !!(accessToken && user);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const t = useCallback(
    (key: string, params?: Record<string, string>): string => {
      const keys = key.split('.');
      if (keys.length < 2) return key;

      let value: unknown = messages;

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ü–µ–ø–æ—á–∫–µ –∫–ª—é—á–µ–π
      for (const k of keys) {
        if (value && typeof value === 'object' && k in value) {
          value = (value as Record<string, unknown>)[k];
        } else {
          return key; // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á
        }
      }

      if (typeof value === 'string') {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–ø–∞ {username}
        if (params) {
          return value.replace(/\{(\w+)\}/g, (match, paramKey) => {
            return params[paramKey] || match;
          });
        }
        return value;
      }

      return key;
    },
    [messages]
  );

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const saveAuthData = useCallback(
    (accessToken: string, refreshToken: string, user: User) => {
      if (typeof window !== 'undefined') {
        sessionStorage.setItem('admin_access_token', accessToken);
        sessionStorage.setItem('admin_refresh_token', refreshToken);
        sessionStorage.setItem('admin_user', JSON.stringify(user));
      }
      setAccessToken(accessToken);
      setRefreshToken(refreshToken);
      setUser(user);
    },
    []
  );

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const clearAuthData = useCallback(() => {
    if (typeof window !== 'undefined') {
      sessionStorage.removeItem('admin_access_token');
      sessionStorage.removeItem('admin_refresh_token');
      sessionStorage.removeItem('admin_user');
    }
    setAccessToken(null);
    setRefreshToken(null);
    setUser(null);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  useEffect(() => {
    const initAuth = () => {
      try {
        if (typeof window !== 'undefined') {
          const storedAccessToken =
            sessionStorage.getItem('admin_access_token');
          const storedRefreshToken = sessionStorage.getItem(
            'admin_refresh_token'
          );
          const storedUser = sessionStorage.getItem('admin_user');

          if (storedAccessToken && storedUser) {
            setAccessToken(storedAccessToken);
            setRefreshToken(storedRefreshToken);
            setUser(JSON.parse(storedUser));
          }
        }
      } catch (error) {
        console.error('Error loading auth data:', error);
        clearAuthData();
      } finally {
        setIsLoading(false);
      }
    };

    initAuth();
  }, [clearAuthData]);

  // –õ–æ–≥–∏–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const login = async (
    username: string,
    password: string
  ): Promise<{ success: boolean; error?: LoginError }> => {
    console.log('üîÑ Starting login request...');

    try {
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ UI
      const response = await fetch(`${baseUrl}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      console.log('üì° Response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
      let responseData: LoginResponse = {};
      try {
        const textResponse = await response.text();
        console.log('üìù Raw response text:', textResponse);

        if (textResponse) {
          responseData = JSON.parse(textResponse) as LoginResponse;
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è Failed to parse response JSON:', parseError);
        responseData = {};
      }

      console.log('üìã Parsed response data:', responseData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status === 401) {
        console.log('üî¥ 401 Unauthorized - Invalid credentials');
        const errorMessage =
          responseData.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        return {
          success: false,
          error: {
            type: 'INVALID_CREDENTIALS',
            message: errorMessage,
            details: `Status: ${response.status}, Error: ${responseData.error || 'Unauthorized'}`,
          },
        };
      }

      if (response.status >= 500) {
        console.log('üî¥ Server error (5xx)');
        return {
          success: false,
          error: {
            type: 'SERVER_ERROR',
            message: responseData.message || t(TranslationKeys.AuthServerError),
            details: `Status: ${response.status}`,
          },
        };
      }

      if (!response.ok) {
        console.error(
          'üî¥ Login failed with status:',
          response.status,
          responseData
        );
        return {
          success: false,
          error: {
            type: 'SERVER_ERROR',
            message: responseData.message || t(TranslationKeys.AuthServerError),
            details: `Status: ${response.status}, Response: ${JSON.stringify(responseData)}`,
          },
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
      if (responseData.access_token && responseData.user) {
        console.log('‚úÖ Login successful!');
        saveAuthData(
          responseData.access_token,
          responseData.refresh_token || '',
          responseData.user
        );
        return { success: true };
      }

      console.log('üî¥ Missing required data in response');
      return {
        success: false,
        error: {
          type: 'SERVER_ERROR',
          message: t(TranslationKeys.AuthServerError),
          details: 'Missing access_token or user in response',
        },
      };
    } catch (error) {
      console.error('üí• Login network error:', error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
      const isNetworkError =
        error instanceof TypeError && error.message.includes('fetch');

      return {
        success: false,
        error: {
          type: 'NETWORK_ERROR',
          message: isNetworkError
            ? '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
            : t(TranslationKeys.AuthNetworkError),
          details:
            error instanceof Error ? error.message : 'Unknown network error',
        },
      };
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const refreshAuth = async (): Promise<boolean> => {
    if (!refreshToken) return false;

    try {
      const response = await fetch(`${baseUrl}/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refresh_token: refreshToken }),
      });

      if (!response.ok) {
        clearAuthData();
        return false;
      }

      const data: RefreshResponse = await response.json();

      if (data.access_token && user) {
        saveAuthData(data.access_token, refreshToken, user);
        return true;
      }

      return false;
    } catch (error) {
      console.error('Token refresh error:', error);
      clearAuthData();
      return false;
    }
  };

  // –õ–æ–≥–∞—É—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const logout = useCallback(async () => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è invalidation —Ç–æ–∫–µ–Ω–∞
      if (accessToken) {
        await fetch(`${baseUrl}/auth/logout`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify({ refresh_token: refreshToken }),
        }).catch((error) => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ logout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          console.warn('Logout request failed:', error);
        });
      }
    } finally {
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      clearAuthData();
    }
  }, [clearAuthData, accessToken, refreshToken, baseUrl]);

  const value: AuthContextType = {
    user,
    accessToken,
    refreshToken,
    isLoading,
    login,
    logout,
    refreshAuth,
    isAuthenticated,
    locale,
    messages,
    t,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
