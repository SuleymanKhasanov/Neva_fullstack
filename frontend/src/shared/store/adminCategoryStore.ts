// frontend/src/shared/store/adminCategoryStore.ts (–°–¢–†–û–ì–û –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import React from 'react';
import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';

// ==================== –°–¢–†–û–ì–ò–ï –¢–ò–ü–´ ====================
interface SelectOption {
  readonly value: string | number;
  readonly label: string;
}

interface Translation {
  readonly id: number;
  readonly name: string;
  readonly locale: string;
}

interface CategoryData {
  readonly id: number;
  readonly section: string;
  readonly name: string;
  readonly subcategories?: readonly SubcategoryData[];
}

interface SubcategoryData {
  readonly id: number;
  readonly categoryId?: number;
  readonly name: string;
}

interface BrandData {
  readonly id: number;
  readonly name: string;
}

interface LoadingState {
  readonly categories: boolean;
  readonly subcategories: boolean;
  readonly brands: boolean;
}

interface ApiResponse<T> {
  readonly success: boolean;
  readonly data?: T;
  readonly message?: string;
  readonly error?: string;
}

// ==================== –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================

interface ProductImage {
  readonly id: string;
  readonly file: File;
  readonly preview: string;
  readonly slotIndex: number;
  readonly isPrimary: boolean;
}

interface ProductSpecificationTranslation {
  readonly ru: { readonly name: string; readonly value: string };
  readonly en: { readonly name: string; readonly value: string };
  readonly uz: { readonly name: string; readonly value: string };
  readonly kr: { readonly name: string; readonly value: string };
}

interface ProductSpecification {
  readonly id: string;
  readonly key: string;
  readonly sortOrder: number;
  readonly translations: ProductSpecificationTranslation;
}

interface ProductTranslations {
  readonly ru: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly en: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly uz: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly kr: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
}

// ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ FormData
interface FormDataShape {
  readonly section: string;
  readonly categoryId: number | null;
  readonly subcategoryId: number | null;
  readonly brandId: number | null;
}

interface AdminCategoryState {
  // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø ====================
  readonly selectedSection: string;
  readonly selectedCategory: number | null;
  readonly selectedSubcategory: number | null;
  readonly selectedBrand: number | null;

  readonly categories: readonly CategoryData[];
  readonly subcategories: readonly SubcategoryData[];
  readonly brands: readonly BrandData[];

  readonly loading: LoadingState;
  readonly error: string;

  // ==================== –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================
  readonly productTranslations: ProductTranslations;
  readonly productImages: readonly ProductImage[];
  readonly productSpecifications: readonly ProductSpecification[];
  readonly isCreatingProduct: boolean;
  readonly productCreationError: string;
  readonly temporaryMessage: string;
  readonly isShowingTempMessage: boolean;

  // ==================== –î–ï–ô–°–¢–í–ò–Ø ====================
  setSelectedSection: (section: string) => void;
  setSelectedCategory: (categoryId: number | null) => void;
  setSelectedSubcategory: (subcategoryId: number | null) => void;
  setSelectedBrand: (brandId: number | null) => void;

  loadCategories: (section: string) => Promise<void>;
  loadSubcategories: (categoryId: number) => Promise<void>;
  loadBrands: (subcategoryId?: number) => Promise<void>;

  setError: (error: string) => void;
  clearError: () => void;
  resetForm: () => void;

  // –ü–µ—Ä–µ–≤–æ–¥—ã
  setProductTranslation: (
    locale: keyof ProductTranslations,
    field: keyof ProductTranslations['ru'],
    value: string
  ) => void;

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  setProductImage: (slotIndex: number, file: File | null) => void;
  removeProductImage: (slotIndex: number) => void;
  setPrimaryProductImage: (slotIndex: number) => void;
  reorderProductImages: (fromIndex: number, toIndex: number) => void;

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  addProductSpecification: (key: string) => void;
  removeProductSpecification: (specId: string) => void;
  setProductSpecification: (
    specId: string,
    locale: keyof ProductSpecificationTranslation,
    field: 'name' | 'value',
    value: string
  ) => void;
  reorderProductSpecifications: (fromIndex: number, toIndex: number) => void;

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  createProduct: () => Promise<boolean>;
  setProductCreationError: (error: string) => void;
  clearProductCreationError: () => void;
  resetProductData: () => void;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  showTemporaryMessage: (message: string, duration?: number) => void;
  hideTemporaryMessage: () => void;
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

const getItemName = (
  item: CategoryData | SubcategoryData | BrandData
): string => {
  return item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
};

const generateImageId = (): string => {
  return `img_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;
};

const createImagePreview = (file: File): string => {
  return URL.createObjectURL(file);
};

const revokeImagePreview = (preview: string): void => {
  URL.revokeObjectURL(preview);
};

// ==================== –ù–ê–ß–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ====================

const initialProductTranslations: ProductTranslations = {
  ru: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  en: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  uz: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  kr: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
};

// ==================== API –§–£–ù–ö–¶–ò–ò ====================

const getAuthToken = (): string | null => {
  const possibleKeys = [
    'admin_access_token',
    'accessToken',
    'access_token',
    'authToken',
    'token',
  ];

  for (const key of possibleKeys) {
    const token = localStorage.getItem(key);
    if (token && token.trim()) {
      console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —Å –∫–ª—é—á–æ–º: ${key}`);
      return token.trim();
    }
  }

  console.error('üö´ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage.');
  return null;
};

const makeApiRequest = async (endpoint: string): Promise<Response> => {
  const token = getAuthToken();

  if (!token) {
    throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage');
  }

  const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
  const fullUrl = `${baseUrl}${endpoint}`;

  console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${fullUrl}`);

  try {
    const response = await fetch(fullUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
      signal: AbortSignal.timeout(10000), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
    return response;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);

    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        throw new Error(
          '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.'
        );
      }
      if (error.message.includes('fetch')) {
        throw new Error(
          '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' +
            baseUrl
        );
      }
    }

    throw error;
  }

  console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
    }

    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
    try {
      const errorData = await response.json();
      if (errorData.message) {
        errorMessage = errorData.message;
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    }

    throw new Error(errorMessage);
  }

  return response;
};

const fetchCategories = async (
  section: string,
  locale: string
): Promise<readonly CategoryData[]> => {
  const response = await makeApiRequest(
    `/admin/master-data/categories?section=${section}&locale=${locale}`
  );

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as CategoryData[];
  }

  const apiResponse = rawData as ApiResponse<CategoryData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: CategoryData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

const fetchSubcategories = async (
  categoryId: number,
  locale: string
): Promise<readonly SubcategoryData[]> => {
  const response = await makeApiRequest(
    `/admin/master-data/subcategories?categoryId=${categoryId}&locale=${locale}`
  );

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as SubcategoryData[];
  }

  const apiResponse = rawData as ApiResponse<SubcategoryData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: SubcategoryData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

const fetchBrands = async (
  subcategoryId?: number,
  locale: string = 'ru'
): Promise<readonly BrandData[]> => {
  let endpoint = `/admin/brands?locale=${locale}`;

  if (subcategoryId) {
    endpoint += `&subcategoryId=${subcategoryId}`;
  }

  const response = await makeApiRequest(endpoint);

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as BrandData[];
  }

  const apiResponse = rawData as ApiResponse<BrandData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: BrandData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

// ==================== ZUSTAND STORE ====================

export const useAdminCategoryStore = create<AdminCategoryState>()(
  subscribeWithSelector((set, get) => ({
    // ==================== –°–û–°–¢–û–Ø–ù–ò–ï ====================
    selectedSection: '',
    selectedCategory: null,
    selectedSubcategory: null,
    selectedBrand: null,

    categories: [],
    subcategories: [],
    brands: [],

    loading: {
      categories: false,
      subcategories: false,
      brands: false,
    },

    error: '',

    productTranslations: initialProductTranslations,
    productImages: [],
    productSpecifications: [],
    isCreatingProduct: false,
    productCreationError: '',
    temporaryMessage: '',
    isShowingTempMessage: false,

    // ==================== –î–ï–ô–°–¢–í–ò–Ø ====================

    setSelectedSection: (section: string) => {
      set({
        selectedSection: section,
        selectedCategory: null,
        selectedSubcategory: null,
        selectedBrand: null,
        categories: [],
        subcategories: [],
        brands: [],
      });

      if (section) {
        get().loadCategories(section);
      }
    },

    setSelectedCategory: (categoryId: number | null) => {
      set({
        selectedCategory: categoryId,
        selectedSubcategory: null,
        selectedBrand: null,
        subcategories: [],
        brands: [],
      });

      if (categoryId) {
        get().loadSubcategories(categoryId);
      }
    },

    setSelectedSubcategory: (subcategoryId: number | null) => {
      set({
        selectedSubcategory: subcategoryId,
        selectedBrand: null,
        brands: [],
      });

      if (subcategoryId) {
        get().loadBrands(subcategoryId);
      }
    },

    setSelectedBrand: (brandId: number | null) => {
      set({ selectedBrand: brandId });
    },

    // ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================

    loadCategories: async (section: string) => {
      const locale = 'ru';

      set((state) => ({
        loading: { ...state.loading, categories: true },
        error: '',
      }));

      try {
        console.log(
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–µ–∫—Ü–∏–∏:',
          section,
          '–ª–æ–∫–∞–ª—å:',
          locale
        );

        const categories = await fetchCategories(section, locale);

        set((state) => ({
          categories,
          loading: { ...state.loading, categories: false },
        }));

        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', categories.length);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π';

        set((state) => ({
          categories: [],
          loading: { ...state.loading, categories: false },
          error: errorMessage,
        }));
      }
    },

    loadSubcategories: async (categoryId: number) => {
      set((state) => ({
        loading: { ...state.loading, subcategories: true },
        error: '',
      }));

      try {
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const state = get();
        const category = state.categories.find((c) => c.id === categoryId);

        if (category && category.subcategories) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          set({
            subcategories: category.subcategories,
            loading: { ...state.loading, subcategories: false },
          });

          console.log(
            `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${category.subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`,
            category.subcategories.map((s) => s.name).join(', ')
          );
        } else {
          // –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          set({
            subcategories: [],
            loading: { ...state.loading, subcategories: false },
          });

          console.log(`‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        }
      } catch (error) {
        const errorMessage =
          error instanceof Error
            ? error.message
            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π';

        set({
          subcategories: [],
          error: errorMessage,
          loading: { ...get().loading, subcategories: false },
        });

        console.error('‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      }
    },

    loadBrands: async (subcategoryId?: number) => {
      const locale = 'ru';

      set((state) => ({
        loading: { ...state.loading, brands: true },
        error: '',
      }));

      try {
        console.log(
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
          subcategoryId,
          '–ª–æ–∫–∞–ª—å:',
          locale
        );

        const brands = await fetchBrands(subcategoryId, locale);

        set((state) => ({
          brands,
          loading: { ...state.loading, brands: false },
        }));

        console.log('‚úÖ –ë—Ä–µ–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', brands.length);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤';

        set((state) => ({
          brands: [],
          loading: { ...state.loading, brands: false },
          error: errorMessage,
        }));
      }
    },

    // ==================== –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================

    setProductTranslation: (locale, field, value) => {
      set((state) => ({
        productTranslations: {
          ...state.productTranslations,
          [locale]: {
            ...state.productTranslations[locale],
            [field]: value,
          },
        },
      }));
    },

    setProductImage: (slotIndex: number, file: File | null) => {
      set((state) => {
        const newImages = [...state.productImages];

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
        const existingIndex = newImages.findIndex(
          (img) => img.slotIndex === slotIndex
        );
        if (existingIndex !== -1) {
          revokeImagePreview(newImages[existingIndex].preview);
          newImages.splice(existingIndex, 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if (file) {
          const newImage: ProductImage = {
            id: generateImageId(),
            file,
            preview: createImagePreview(file),
            slotIndex,
            isPrimary: newImages.length === 0, // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ
          };
          newImages.push(newImage);
        }

        return { productImages: newImages };
      });
    },

    removeProductImage: (slotIndex: number) => {
      set((state) => {
        const imageToRemove = state.productImages.find(
          (img) => img.slotIndex === slotIndex
        );
        if (imageToRemove) {
          revokeImagePreview(imageToRemove.preview);
        }

        const newImages = state.productImages.filter(
          (img) => img.slotIndex !== slotIndex
        );

        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–µ—Ä–≤–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
        if (imageToRemove?.isPrimary && newImages.length > 0) {
          newImages[0] = { ...newImages[0], isPrimary: true };
        }

        return { productImages: newImages };
      });
    },

    setPrimaryProductImage: (slotIndex: number) => {
      set((state) => {
        const newImages = state.productImages.map((img) => ({
          ...img,
          isPrimary: img.slotIndex === slotIndex,
        }));

        return { productImages: newImages };
      });
    },

    reorderProductImages: (fromIndex: number, toIndex: number) => {
      set((state) => {
        const newImages = [...state.productImages];
        const fromImage = newImages.find((img) => img.slotIndex === fromIndex);
        const toImage = newImages.find((img) => img.slotIndex === toIndex);

        if (fromImage && toImage) {
          // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ slotIndex
          const updatedImages = newImages.map((img) => {
            if (img.slotIndex === fromIndex) {
              return { ...img, slotIndex: toIndex };
            }
            if (img.slotIndex === toIndex) {
              return { ...img, slotIndex: fromIndex };
            }
            return img;
          });

          return { productImages: updatedImages };
        }

        return state;
      });
    },

    // ==================== –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ====================

    addProductSpecification: (key: string) => {
      set((state) => {
        const newSpecification: ProductSpecification = {
          id: `spec_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`,
          key: key.toLowerCase().replace(/[^a-z0-9_]/g, '_'),
          sortOrder: state.productSpecifications.length,
          translations: {
            ru: { name: '', value: '' },
            en: { name: '', value: '' },
            uz: { name: '', value: '' },
            kr: { name: '', value: '' },
          },
        };

        return {
          productSpecifications: [
            ...state.productSpecifications,
            newSpecification,
          ],
        };
      });
    },

    removeProductSpecification: (specId: string) => {
      set((state) => ({
        productSpecifications: state.productSpecifications.filter(
          (spec) => spec.id !== specId
        ),
      }));
    },

    setProductSpecification: (specId: string, locale, field, value) => {
      set((state) => ({
        productSpecifications: state.productSpecifications.map((spec) =>
          spec.id === specId
            ? {
                ...spec,
                translations: {
                  ...spec.translations,
                  [locale]: {
                    ...spec.translations[locale],
                    [field]: value,
                  },
                },
              }
            : spec
        ),
      }));
    },

    reorderProductSpecifications: (fromIndex: number, toIndex: number) => {
      set((state) => {
        const newSpecs = [...state.productSpecifications];
        const [movedSpec] = newSpecs.splice(fromIndex, 1);
        newSpecs.splice(toIndex, 0, movedSpec);

        // –û–±–Ω–æ–≤–ª—è–µ–º sortOrder
        const updatedSpecs = newSpecs.map((spec, index) => ({
          ...spec,
          sortOrder: index,
        }));

        return { productSpecifications: updatedSpecs };
      });
    },

    // ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø createProduct (JSON + –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    createProduct: async () => {
      const state = get();

      console.log('üîç Debug –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
        selectedSection: state.selectedSection,
        selectedCategory: state.selectedCategory,
        selectedSubcategory: state.selectedSubcategory,
        selectedBrand: state.selectedBrand,
        ruName: state.productTranslations.ru.name,
        imagesCount: state.productImages.length,
        productTranslations: state.productTranslations,
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!state.selectedSection || state.selectedSection.trim() === '') {
        set({ productCreationError: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é (NEVA –∏–ª–∏ X-Solution)' });
        return false;
      }

      if (!state.selectedCategory || state.selectedCategory < 1) {
        set({ productCreationError: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
        return false;
      }

      if (!state.productTranslations.ru.name.trim()) {
        set({
          productCreationError: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        });
        return false;
      }

      set({ isCreatingProduct: true, productCreationError: '' });

      try {
        const token = getAuthToken();
        if (!token) {
          throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const baseUrl =
          process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';

        // ‚úÖ –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ JSON API (—Ç–æ—á–Ω–æ –ø–æ Swagger —Å—Ö–µ–º–µ)
        const productData = {
          section: state.selectedSection.trim().toUpperCase(), // "NEVA" –∏–ª–∏ "X_SOLUTION"
          categoryId: Number(state.selectedCategory),
          subcategoryId: state.selectedSubcategory
            ? Number(state.selectedSubcategory)
            : undefined,
          brandId: state.selectedBrand
            ? Number(state.selectedBrand)
            : undefined,
          isActive: true,
          translations: [
            {
              locale: 'ru',
              name: state.productTranslations.ru.name.trim(),
              description:
                state.productTranslations.ru.description?.trim() || '',
              marketingDescription:
                state.productTranslations.ru.marketingDescription?.trim() || '',
            },
          ],
          specifications: state.productSpecifications
            .filter((spec) => {
              // –í–∫–ª—é—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
              const ruTranslation = spec.translations.ru;
              return ruTranslation.name.trim() || ruTranslation.value.trim();
            })
            .map((spec) => ({
              key: spec.key,
              sortOrder: spec.sortOrder,
              translations: Object.entries(spec.translations)
                .filter(
                  ([, translation]) =>
                    translation.name.trim() || translation.value.trim()
                )
                .map(([locale, translation]) => ({
                  locale,
                  name: translation.name.trim() || '',
                  value: translation.value.trim() || '',
                })),
            }))
            .filter((spec) => spec.translations.length > 0), // –¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ
        (['en', 'uz', 'kr'] as const).forEach((locale) => {
          const translation = state.productTranslations[locale];
          const hasName = translation.name && translation.name.trim();
          const hasDescription =
            translation.description && translation.description.trim();
          const hasMarketingDescription =
            translation.marketingDescription &&
            translation.marketingDescription.trim();

          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
          if (hasName || hasDescription || hasMarketingDescription) {
            productData.translations.push({
              locale,
              name: hasName ? translation.name.trim() : '', // –ï—Å–ª–∏ name –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
              description: hasDescription ? translation.description.trim() : '',
              marketingDescription: hasMarketingDescription
                ? translation.marketingDescription.trim()
                : '',
            });
          }
        });

        console.log(
          'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:',
          productData
        );

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        const productResponse = await fetch(`${baseUrl}/admin/products`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(productData),
        });

        console.log(
          `üì° –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${productResponse.status} ${productResponse.statusText}`
        );

        if (!productResponse.ok) {
          const errorData = await productResponse.json();
          console.error('üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', errorData);

          let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
          if (errorData.message) {
            if (Array.isArray(errorData.message)) {
              errorMessage = errorData.message.join(', ');
            } else {
              errorMessage = errorData.message;
            }
          }
          throw new Error(errorMessage);
        }

        const createdProduct = await productResponse.json();
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', createdProduct);

        // ‚úÖ –®–ê–ì 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (state.productImages.length > 0) {
          console.log(
            `üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º ${state.productImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${createdProduct.productId}...`
          );

          try {
            const imageFormData = new FormData();

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ slotIndex
            const sortedImages = [...state.productImages].sort(
              (a: ProductImage, b: ProductImage) => a.slotIndex - b.slotIndex
            );
            sortedImages.forEach((image: ProductImage) => {
              imageFormData.append('images', image.file);
              console.log(
                `üì§ –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.file.name} (${image.file.size} bytes)`
              );
            });

            const imageResponse = await fetch(
              `${baseUrl}/admin/products/${createdProduct.productId}/images`,
              {
                method: 'POST',
                headers: {
                  Authorization: `Bearer ${token}`,
                },
                body: imageFormData,
              }
            );

            console.log(
              `üì° –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageResponse.status} ${imageResponse.statusText}`
            );

            if (!imageResponse.ok) {
              const imageError = await imageResponse.json();
              console.warn(
                '‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:',
                imageError
              );
              // –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
            } else {
              const imageResult = await imageResponse.json();
              console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', imageResult);
            }
          } catch (imageError) {
            console.warn(
              '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω):',
              imageError
            );
            // –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
          }
        } else {
          console.log(
            'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã - –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
          );
        }

        console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞
        await new Promise((resolve) => setTimeout(resolve, 500));

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        get().resetProductData();
        set({ isCreatingProduct: false });

        console.log(
          '‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–±—Ä–æ—à–µ–Ω—ã, –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ'
        );
        return true;
      } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);

        const errorMessage =
          error instanceof Error
            ? error.message
            : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
        set({
          isCreatingProduct: false,
          productCreationError: errorMessage,
        });
        return false;
      }
    },

    setProductCreationError: (error: string) => {
      set({ productCreationError: error });
    },

    clearProductCreationError: () => {
      set({ productCreationError: '' });
    },

    resetProductData: () => {
      const state = get();

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ preview URL
      state.productImages.forEach((img) => {
        revokeImagePreview(img.preview);
      });

      set({
        productTranslations: initialProductTranslations,
        productImages: [],
        productSpecifications: [],
        productCreationError: '',
      });
    },

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    showTemporaryMessage: (message: string, duration = 3000) => {
      set({ temporaryMessage: message, isShowingTempMessage: true });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        const currentState = get();
        currentState.hideTemporaryMessage();
      }, duration);
    },

    hideTemporaryMessage: () => {
      set({ temporaryMessage: '', isShowingTempMessage: false });
    },

    // ==================== –£–¢–ò–õ–ò–¢–´ ====================

    setError: (error: string) => {
      set({ error });
    },

    clearError: () => {
      set({ error: '' });
    },

    resetForm: () => {
      const state = get();

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º preview URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      state.productImages.forEach((img) => {
        revokeImagePreview(img.preview);
      });

      set({
        selectedSection: '',
        selectedCategory: null,
        selectedSubcategory: null,
        selectedBrand: null,
        categories: [],
        subcategories: [],
        brands: [],
        loading: {
          categories: false,
          subcategories: false,
          brands: false,
        },
        error: '',
        productTranslations: initialProductTranslations,
        productImages: [],
        productSpecifications: [],
        isCreatingProduct: false,
        productCreationError: '',
      });
    },
  }))
);

// ==================== –°–ï–õ–ï–ö–¢–û–†–´ ====================

const createSelectOptions = (
  items:
    | readonly CategoryData[]
    | readonly SubcategoryData[]
    | readonly BrandData[]
): SelectOption[] => {
  return items.map((item) => ({
    value: item.id,
    label: getItemName(item),
  }));
};

export const useSelectedSection = (): string =>
  useAdminCategoryStore((state) => state.selectedSection);

export const useSelectedCategory = (): number | null =>
  useAdminCategoryStore((state) => state.selectedCategory);

export const useSelectedSubcategory = (): number | null =>
  useAdminCategoryStore((state) => state.selectedSubcategory);

export const useSelectedBrand = (): number | null =>
  useAdminCategoryStore((state) => state.selectedBrand);

export const useCategories = (): readonly CategoryData[] =>
  useAdminCategoryStore((state) => state.categories);

export const useSubcategories = (): readonly SubcategoryData[] =>
  useAdminCategoryStore((state) => state.subcategories);

export const useBrands = (): readonly BrandData[] =>
  useAdminCategoryStore((state) => state.brands);

export const useLoading = (): LoadingState =>
  useAdminCategoryStore((state) => state.loading);

export const useError = (): string =>
  useAdminCategoryStore((state) => state.error);

export const useProductTranslations = (): ProductTranslations =>
  useAdminCategoryStore((state) => state.productTranslations);

export const useProductImages = (): readonly ProductImage[] =>
  useAdminCategoryStore((state) => state.productImages);

export const useProductSpecifications = (): readonly ProductSpecification[] =>
  useAdminCategoryStore((state) => state.productSpecifications);

export const useIsCreatingProduct = (): boolean =>
  useAdminCategoryStore((state) => state.isCreatingProduct);

export const useProductCreationError = (): string =>
  useAdminCategoryStore((state) => state.productCreationError);

export const useTemporaryMessage = (): string =>
  useAdminCategoryStore((state) => state.temporaryMessage);

export const useShowTemporaryMessage = (): boolean =>
  useAdminCategoryStore((state) => state.isShowingTempMessage);

export const useProductImageBySlot = (slotIndex: number): ProductImage | null =>
  useAdminCategoryStore(
    (state) =>
      state.productImages.find((img) => img.slotIndex === slotIndex) || null
  );

export const useProductSpecificationById = (
  specId: string
): ProductSpecification | null =>
  useAdminCategoryStore(
    (state) =>
      state.productSpecifications.find((spec) => spec.id === specId) || null
  );

// ==================== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´ ====================

export const useCategoryOptions = (): SelectOption[] => {
  const categories = useCategories();

  return React.useMemo(() => createSelectOptions(categories), [categories]);
};

export const useSubcategoryOptions = (): SelectOption[] => {
  const subcategories = useSubcategories();

  return React.useMemo(
    () => createSelectOptions(subcategories),
    [subcategories]
  );
};

export const useBrandOptions = (): SelectOption[] => {
  const brands = useBrands();

  return React.useMemo(() => createSelectOptions(brands), [brands]);
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø
export const useFormData = (): FormDataShape => {
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const selectedSubcategory = useSelectedSubcategory();
  const selectedBrand = useSelectedBrand();

  return React.useMemo(
    () => ({
      section: selectedSection,
      categoryId: selectedCategory,
      subcategoryId: selectedSubcategory,
      brandId: selectedBrand,
    }),
    [selectedSection, selectedCategory, selectedSubcategory, selectedBrand]
  );
};

export const useIsFormValid = (): boolean => {
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const selectedSubcategory = useSelectedSubcategory();
  const selectedBrand = useSelectedBrand();
  const productTranslations = useProductTranslations();
  const productImages = useProductImages();
  const productSpecifications = useProductSpecifications();

  return React.useMemo(() => {
    const isValidSection = Boolean(
      selectedSection &&
        selectedSection.trim() &&
        ['NEVA', 'X_SOLUTION'].includes(selectedSection.trim().toUpperCase())
    );

    const isValidCategory = Boolean(selectedCategory && selectedCategory > 0);
    const isValidSubcategory = Boolean(
      selectedSubcategory && selectedSubcategory > 0
    );
    const isValidBrand = Boolean(selectedBrand && selectedBrand > 0);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤: name, description, specifications –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π
    const isValidTranslations = Boolean(
      // –†—É—Å—Å–∫–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      productTranslations.ru.name.trim().length >= 2 &&
        productTranslations.ru.description.trim() &&
        productTranslations.ru.specifications.trim() &&
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        productTranslations.en.name.trim() &&
        productTranslations.en.description.trim() &&
        productTranslations.en.specifications.trim() &&
        // –£–∑–±–µ–∫—Å–∫–∏–π
        productTranslations.uz.name.trim() &&
        productTranslations.uz.description.trim() &&
        productTranslations.uz.specifications.trim() &&
        // –ö–æ—Ä–µ–π—Å–∫–∏–π
        productTranslations.kr.name.trim() &&
        productTranslations.kr.description.trim() &&
        productTranslations.kr.specifications.trim()
    );

    const isValidImages = productImages.length > 0;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –≤—Å–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å name –∏ value –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    const isValidSpecifications = productSpecifications.every((spec) => {
      const ruTranslation = spec.translations.ru;
      return ruTranslation.name.trim() && ruTranslation.value.trim();
    });

    const isValid =
      isValidSection &&
      isValidCategory &&
      isValidSubcategory &&
      isValidBrand &&
      isValidTranslations &&
      isValidImages &&
      isValidSpecifications;

    console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã (17 –ø–æ–ª–µ–π = 100%):', {
      isValidSection,
      isValidCategory,
      isValidSubcategory,
      isValidBrand,
      isValidTranslations,
      isValidImages,
      isValidSpecifications,
      specificationsCount: productSpecifications.length,
      finalResult: isValid,
    });

    return isValid;
  }, [
    selectedSection,
    selectedCategory,
    selectedSubcategory,
    selectedBrand,
    productTranslations,
    productImages.length,
    productSpecifications,
  ]);
};

// ==================== –≠–ö–°–ü–û–†–¢ –î–ï–ô–°–¢–í–ò–ô ====================

export const useAdminCategoryActions = () => {
  const store = useAdminCategoryStore();

  return React.useMemo(
    () => ({
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      setSelectedSection: store.setSelectedSection,
      setSelectedCategory: store.setSelectedCategory,
      setSelectedSubcategory: store.setSelectedSubcategory,
      setSelectedBrand: store.setSelectedBrand,
      clearError: store.clearError,
      resetForm: store.resetForm,

      // –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
      setProductTranslation: store.setProductTranslation,
      setProductImage: store.setProductImage,
      removeProductImage: store.removeProductImage,
      setPrimaryProductImage: store.setPrimaryProductImage,
      reorderProductImages: store.reorderProductImages,

      // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      addProductSpecification: store.addProductSpecification,
      removeProductSpecification: store.removeProductSpecification,
      setProductSpecification: store.setProductSpecification,
      reorderProductSpecifications: store.reorderProductSpecifications,

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      createProduct: store.createProduct,
      setProductCreationError: store.setProductCreationError,
      clearProductCreationError: store.clearProductCreationError,
      resetProductData: store.resetProductData,

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      showTemporaryMessage: store.showTemporaryMessage,
      hideTemporaryMessage: store.hideTemporaryMessage,
    }),
    [store]
  );
};
