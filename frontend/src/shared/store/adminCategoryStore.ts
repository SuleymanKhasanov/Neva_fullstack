// frontend/src/shared/store/adminCategoryStore.ts (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import React from 'react';
import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import { getCurrentLocale } from '@/shared/utils/redirect';

// ==================== –°–¢–†–û–ì–ò–ï –¢–ò–ü–´ ====================

interface SelectOption {
  readonly value: string | number;
  readonly label: string;
}

interface Translation {
  readonly id: number;
  readonly name: string;
  readonly locale: string;
}

interface CategoryData {
  readonly id: number;
  readonly section: string;
  readonly translations: readonly Translation[];
}

interface SubcategoryData {
  readonly id: number;
  readonly categoryId: number;
  readonly translations: readonly Translation[];
}

interface BrandData {
  readonly id: number;
  readonly translations: readonly Translation[];
}

interface LoadingState {
  readonly categories: boolean;
  readonly subcategories: boolean;
  readonly brands: boolean;
}

interface ApiResponse<T> {
  readonly success: boolean;
  readonly data?: T;
  readonly message?: string;
  readonly error?: string;
}

// ==================== –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================

interface ProductImage {
  readonly id: string;
  readonly file: File;
  readonly preview: string;
  readonly slotIndex: number;
  readonly isPrimary: boolean;
}

interface ProductTranslations {
  readonly ru: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly en: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly uz: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
  readonly kr: {
    readonly name: string;
    readonly description: string;
    readonly marketingDescription: string;
    readonly specifications: string;
  };
}

interface AdminCategoryState {
  // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø ====================
  // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  readonly selectedSection: string;
  readonly selectedCategory: number | null;
  readonly selectedSubcategory: number | null;
  readonly selectedBrand: number | null;

  // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  readonly categories: readonly CategoryData[];
  readonly subcategories: readonly SubcategoryData[];
  readonly brands: readonly BrandData[];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  readonly loading: LoadingState;
  readonly error: string;

  // ==================== –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================
  // –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∞
  readonly productTranslations: ProductTranslations;

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (5 —Å–ª–æ—Ç–æ–≤: 0, 1, 2, 3, 4)
  readonly productImages: readonly ProductImage[];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  readonly isCreatingProduct: boolean;
  readonly productCreationError: string;

  // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø ====================
  setSelectedSection: (section: string) => void;
  setSelectedCategory: (categoryId: number | null) => void;
  setSelectedSubcategory: (subcategoryId: number | null) => void;
  setSelectedBrand: (brandId: number | null) => void;

  loadCategories: (section: string) => Promise<void>;
  loadSubcategories: (categoryId: number) => Promise<void>;
  loadBrands: (subcategoryId?: number) => Promise<void>;

  setError: (error: string) => void;
  clearError: () => void;
  resetForm: () => void;

  // ==================== –ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================
  // –ü–µ—Ä–µ–≤–æ–¥—ã
  setProductTranslation: (
    locale: keyof ProductTranslations,
    field: keyof ProductTranslations['ru'],
    value: string
  ) => void;

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  setProductImage: (slotIndex: number, file: File | null) => void;
  removeProductImage: (slotIndex: number) => void;
  setPrimaryProductImage: (slotIndex: number) => void;
  reorderProductImages: (fromIndex: number, toIndex: number) => void;

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  createProduct: () => Promise<boolean>;
  setProductCreationError: (error: string) => void;
  clearProductCreationError: () => void;

  // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
  resetProductData: () => void;
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

const getTranslatedName = (
  translations: readonly Translation[],
  locale = 'ru'
): string => {
  const translation = translations.find((t) => t.locale === locale);
  return translation?.name || translations[0]?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
};

const generateImageId = (): string => {
  return `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

const createImagePreview = (file: File): string => {
  return URL.createObjectURL(file);
};

const revokeImagePreview = (preview: string): void => {
  URL.revokeObjectURL(preview);
};

// ==================== –ù–ê–ß–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ====================

const initialProductTranslations: ProductTranslations = {
  ru: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  en: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  uz: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
  kr: {
    name: '',
    description: '',
    marketingDescription: '',
    specifications: '',
  },
};

// ==================== API –§–£–ù–ö–¶–ò–ò ====================

const getAuthToken = (): string | null => {
  const possibleKeys = [
    'admin_access_token',
    'accessToken',
    'access_token',
    'authToken',
    'token',
  ];

  for (const key of possibleKeys) {
    const token = localStorage.getItem(key);
    if (token && token.trim()) {
      console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —Å –∫–ª—é—á–æ–º: ${key}`);
      return token.trim();
    }
  }

  console.error('üö´ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage.');
  return null;
};

const makeApiRequest = async (endpoint: string): Promise<Response> => {
  const token = getAuthToken();

  if (!token) {
    throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage');
  }

  const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
  const fullUrl = `${baseUrl}${endpoint}`;

  console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${fullUrl}`);

  const response = await fetch(fullUrl, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  });

  console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
    }

    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
    try {
      const errorData = await response.json();
      if (errorData.message) {
        errorMessage = errorData.message;
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    }

    throw new Error(errorMessage);
  }

  return response;
};

const fetchCategories = async (
  section: string,
  locale: string
): Promise<readonly CategoryData[]> => {
  const response = await makeApiRequest(
    `/admin/categories?section=${section}&locale=${locale}`
  );

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as CategoryData[];
  }

  const apiResponse = rawData as ApiResponse<CategoryData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: CategoryData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

const fetchSubcategories = async (
  categoryId: number,
  locale: string
): Promise<readonly SubcategoryData[]> => {
  const response = await makeApiRequest(
    `/admin/categories/subcategories/all?categoryId=${categoryId}&locale=${locale}`
  );

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as SubcategoryData[];
  }

  const apiResponse = rawData as ApiResponse<SubcategoryData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: SubcategoryData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

const fetchBrands = async (
  subcategoryId?: number,
  locale: string = 'ru'
): Promise<readonly BrandData[]> => {
  let endpoint = `/admin/brands?locale=${locale}`;

  if (subcategoryId) {
    endpoint += `&subcategoryId=${subcategoryId}`;
  }

  const response = await makeApiRequest(endpoint);

  const rawData: unknown = await response.json();

  if (Array.isArray(rawData)) {
    return rawData as BrandData[];
  }

  const apiResponse = rawData as ApiResponse<BrandData[]>;
  if (
    typeof apiResponse === 'object' &&
    apiResponse !== null &&
    'success' in apiResponse
  ) {
    if (!apiResponse.success) {
      throw new Error(apiResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤');
    }
    return apiResponse.data || [];
  }

  const dataResponse = rawData as { data?: BrandData[] };
  if (
    typeof dataResponse === 'object' &&
    dataResponse !== null &&
    'data' in dataResponse
  ) {
    return dataResponse.data || [];
  }

  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
};

// ==================== API –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê ====================

const createProductApi = async (formData: FormData): Promise<boolean> => {
  const token = getAuthToken();

  if (!token) {
    throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage');
  }

  const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
  const fullUrl = `${baseUrl}/admin/products`;

  console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${fullUrl}`);

  const response = await fetch(fullUrl, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${token}`,
    },
    body: formData,
  });

  console.log(
    `üì° –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${response.status} ${response.statusText}`
  );

  if (!response.ok) {
    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
    try {
      const errorData = await response.json();
      if (errorData.message) {
        errorMessage = errorData.message;
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    }
    throw new Error(errorMessage);
  }

  return true;
};

// ==================== ZUSTAND STORE ====================

export const useAdminCategoryStore = create<AdminCategoryState>()(
  subscribeWithSelector((set, get) => ({
    // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ====================
    selectedSection: '',
    selectedCategory: null,
    selectedSubcategory: null,
    selectedBrand: null,

    categories: [],
    subcategories: [],
    brands: [],

    loading: {
      categories: false,
      subcategories: false,
      brands: false,
    },

    error: '',

    // ==================== –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–û–î–£–ö–¢–ê ====================
    productTranslations: initialProductTranslations,
    productImages: [],
    isCreatingProduct: false,
    productCreationError: '',

    // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï SETTER –î–ï–ô–°–¢–í–ò–Ø ====================

    setSelectedSection: (section: string) => {
      set({
        selectedSection: section,
        selectedCategory: null,
        selectedSubcategory: null,
        selectedBrand: null,
        categories: [],
        subcategories: [],
        brands: [],
      });

      if (section) {
        get().loadCategories(section);
      }
    },

    setSelectedCategory: (categoryId: number | null) => {
      set({
        selectedCategory: categoryId,
        selectedSubcategory: null,
        selectedBrand: null,
        subcategories: [],
        brands: [],
      });

      if (categoryId) {
        get().loadSubcategories(categoryId);
      }
    },

    setSelectedSubcategory: (subcategoryId: number | null) => {
      set({
        selectedSubcategory: subcategoryId,
        selectedBrand: null,
        brands: [],
      });

      if (subcategoryId) {
        get().loadBrands(subcategoryId);
      }
    },

    setSelectedBrand: (brandId: number | null) => {
      set({ selectedBrand: brandId });
    },

    // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================

    loadCategories: async (section: string) => {
      const locale = getCurrentLocale();

      set((state) => ({
        loading: { ...state.loading, categories: true },
        error: '',
      }));

      try {
        console.log(
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–µ–∫—Ü–∏–∏:',
          section,
          '–ª–æ–∫–∞–ª—å:',
          locale
        );

        const categories = await fetchCategories(section, locale);

        set((state) => ({
          categories,
          loading: { ...state.loading, categories: false },
        }));

        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', categories.length);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π';

        set((state) => ({
          categories: [],
          loading: { ...state.loading, categories: false },
          error: errorMessage,
        }));
      }
    },

    loadSubcategories: async (categoryId: number) => {
      const locale = getCurrentLocale();

      set((state) => ({
        loading: { ...state.loading, subcategories: true },
        error: '',
      }));

      try {
        console.log(
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
          categoryId,
          '–ª–æ–∫–∞–ª—å:',
          locale
        );

        const subcategories = await fetchSubcategories(categoryId, locale);

        set((state) => ({
          subcategories,
          loading: { ...state.loading, subcategories: false },
        }));

        console.log('‚úÖ –°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', subcategories.length);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);

        const errorMessage =
          error instanceof Error
            ? error.message
            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π';

        set((state) => ({
          subcategories: [],
          loading: { ...state.loading, subcategories: false },
          error: errorMessage,
        }));
      }
    },

    loadBrands: async (subcategoryId?: number) => {
      const locale = getCurrentLocale();

      set((state) => ({
        loading: { ...state.loading, brands: true },
        error: '',
      }));

      try {
        console.log(
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
          subcategoryId,
          '–ª–æ–∫–∞–ª—å:',
          locale
        );

        const brands = await fetchBrands(subcategoryId, locale);

        set((state) => ({
          brands,
          loading: { ...state.loading, brands: false },
        }));

        console.log('‚úÖ –ë—Ä–µ–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', brands.length);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤';

        set((state) => ({
          brands: [],
          loading: { ...state.loading, brands: false },
          error: errorMessage,
        }));
      }
    },

    // ==================== –ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================

    setProductTranslation: (locale, field, value) => {
      set((state) => ({
        productTranslations: {
          ...state.productTranslations,
          [locale]: {
            ...state.productTranslations[locale],
            [field]: value,
          },
        },
      }));
    },

    setProductImage: (slotIndex: number, file: File | null) => {
      set((state) => {
        const newImages = [...state.productImages];

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
        const existingIndex = newImages.findIndex(
          (img) => img.slotIndex === slotIndex
        );
        if (existingIndex !== -1) {
          revokeImagePreview(newImages[existingIndex].preview);
          newImages.splice(existingIndex, 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if (file) {
          const newImage: ProductImage = {
            id: generateImageId(),
            file,
            preview: createImagePreview(file),
            slotIndex,
            isPrimary: newImages.length === 0, // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ
          };
          newImages.push(newImage);
        }

        return { productImages: newImages };
      });
    },

    removeProductImage: (slotIndex: number) => {
      set((state) => {
        const imageToRemove = state.productImages.find(
          (img) => img.slotIndex === slotIndex
        );
        if (imageToRemove) {
          revokeImagePreview(imageToRemove.preview);
        }

        const newImages = state.productImages.filter(
          (img) => img.slotIndex !== slotIndex
        );

        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–µ—Ä–≤–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
        if (imageToRemove?.isPrimary && newImages.length > 0) {
          newImages[0] = { ...newImages[0], isPrimary: true };
        }

        return { productImages: newImages };
      });
    },

    setPrimaryProductImage: (slotIndex: number) => {
      set((state) => {
        const newImages = state.productImages.map((img) => ({
          ...img,
          isPrimary: img.slotIndex === slotIndex,
        }));

        return { productImages: newImages };
      });
    },

    reorderProductImages: (fromIndex: number, toIndex: number) => {
      set((state) => {
        const newImages = [...state.productImages];
        const fromImage = newImages.find((img) => img.slotIndex === fromIndex);
        const toImage = newImages.find((img) => img.slotIndex === toIndex);

        if (fromImage && toImage) {
          // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ slotIndex
          const updatedImages = newImages.map((img) => {
            if (img.slotIndex === fromIndex) {
              return { ...img, slotIndex: toIndex };
            }
            if (img.slotIndex === toIndex) {
              return { ...img, slotIndex: fromIndex };
            }
            return img;
          });

          return { productImages: updatedImages };
        }

        return state;
      });
    },

    createProduct: async () => {
      const state = get();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!state.selectedSection || !state.selectedCategory) {
        set({ productCreationError: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
        return false;
      }

      if (!state.productTranslations.ru.name.trim()) {
        set({
          productCreationError: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        });
        return false;
      }

      if (state.productImages.length === 0) {
        set({ productCreationError: '–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' });
        return false;
      }

      set({ isCreatingProduct: true, productCreationError: '' });

      try {
        const formData = new FormData();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        formData.append('section', state.selectedSection);
        formData.append('categoryId', state.selectedCategory.toString());
        if (state.selectedSubcategory) {
          formData.append(
            'subcategoryId',
            state.selectedSubcategory.toString()
          );
        }
        if (state.selectedBrand) {
          formData.append('brandId', state.selectedBrand.toString());
        }

        // –ü–µ—Ä–µ–≤–æ–¥—ã
        formData.append(
          'translations',
          JSON.stringify(state.productTranslations)
        );

        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ slotIndex)
        const sortedImages = [...state.productImages].sort(
          (a, b) => a.slotIndex - b.slotIndex
        );
        sortedImages.forEach((image, index) => {
          formData.append('images', image.file);
          formData.append(
            `imageMetadata[${index}]`,
            JSON.stringify({
              slotIndex: image.slotIndex,
              isPrimary: image.isPrimary,
            })
          );
        });

        await createProductApi(formData);

        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        get().resetProductData();

        set({ isCreatingProduct: false });
        return true;
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';

        set({
          isCreatingProduct: false,
          productCreationError: errorMessage,
        });
        return false;
      }
    },

    setProductCreationError: (error: string) => {
      set({ productCreationError: error });
    },

    clearProductCreationError: () => {
      set({ productCreationError: '' });
    },

    resetProductData: () => {
      const state = get();

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ preview URL
      state.productImages.forEach((img) => {
        revokeImagePreview(img.preview);
      });

      set({
        productTranslations: initialProductTranslations,
        productImages: [],
        productCreationError: '',
      });
    },

    // ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –£–¢–ò–õ–ò–¢–´ ====================

    setError: (error: string) => {
      set({ error });
    },

    clearError: () => {
      set({ error: '' });
    },

    resetForm: () => {
      const state = get();

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º preview URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      state.productImages.forEach((img) => {
        revokeImagePreview(img.preview);
      });

      set({
        selectedSection: '',
        selectedCategory: null,
        selectedSubcategory: null,
        selectedBrand: null,
        categories: [],
        subcategories: [],
        brands: [],
        loading: {
          categories: false,
          subcategories: false,
          brands: false,
        },
        error: '',
        productTranslations: initialProductTranslations,
        productImages: [],
        isCreatingProduct: false,
        productCreationError: '',
      });
    },
  }))
);

// ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–ï–õ–ï–ö–¢–û–†–´ ====================

const createSelectOptions = (
  items:
    | readonly CategoryData[]
    | readonly SubcategoryData[]
    | readonly BrandData[],
  locale: string
): SelectOption[] => {
  return items.map((item) => ({
    value: item.id,
    label: getTranslatedName(item.translations, locale),
  }));
};

export const useSelectedSection = (): string =>
  useAdminCategoryStore((state) => state.selectedSection);

export const useSelectedCategory = (): number | null =>
  useAdminCategoryStore((state) => state.selectedCategory);

export const useSelectedSubcategory = (): number | null =>
  useAdminCategoryStore((state) => state.selectedSubcategory);

export const useSelectedBrand = (): number | null =>
  useAdminCategoryStore((state) => state.selectedBrand);

export const useCategories = (): readonly CategoryData[] =>
  useAdminCategoryStore((state) => state.categories);

export const useSubcategories = (): readonly SubcategoryData[] =>
  useAdminCategoryStore((state) => state.subcategories);

export const useBrands = (): readonly BrandData[] =>
  useAdminCategoryStore((state) => state.brands);

export const useLoading = (): LoadingState =>
  useAdminCategoryStore((state) => state.loading);

export const useError = (): string =>
  useAdminCategoryStore((state) => state.error);

// ==================== –ù–û–í–´–ï –°–ï–õ–ï–ö–¢–û–†–´ –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ====================

export const useProductTranslations = (): ProductTranslations =>
  useAdminCategoryStore((state) => state.productTranslations);

export const useProductImages = (): readonly ProductImage[] =>
  useAdminCategoryStore((state) => state.productImages);

export const useIsCreatingProduct = (): boolean =>
  useAdminCategoryStore((state) => state.isCreatingProduct);

export const useProductCreationError = (): string =>
  useAdminCategoryStore((state) => state.productCreationError);

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ª–æ—Ç—É
export const useProductImageBySlot = (slotIndex: number): ProductImage | null =>
  useAdminCategoryStore(
    (state) =>
      state.productImages.find((img) => img.slotIndex === slotIndex) || null
  );

// ==================== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´ ====================

export const useCategoryOptions = (): SelectOption[] => {
  const categories = useCategories();
  const locale = getCurrentLocale();

  return React.useMemo(
    () => createSelectOptions(categories, locale),
    [categories, locale]
  );
};

export const useSubcategoryOptions = (): SelectOption[] => {
  const subcategories = useSubcategories();
  const locale = getCurrentLocale();

  return React.useMemo(
    () => createSelectOptions(subcategories, locale),
    [subcategories, locale]
  );
};

export const useBrandOptions = (): SelectOption[] => {
  const brands = useBrands();
  const locale = getCurrentLocale();

  return React.useMemo(
    () => createSelectOptions(brands, locale),
    [brands, locale]
  );
};

export const useFormData = () => {
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const selectedSubcategory = useSelectedSubcategory();
  const selectedBrand = useSelectedBrand();

  return React.useMemo(
    () => ({
      section: selectedSection,
      categoryId: selectedCategory,
      subcategoryId: selectedSubcategory,
      brandId: selectedBrand,
    }),
    [selectedSection, selectedCategory, selectedSubcategory, selectedBrand]
  );
};

export const useIsFormValid = (): boolean => {
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const productTranslations = useProductTranslations();
  const productImages = useProductImages();

  return React.useMemo(
    () =>
      Boolean(
        selectedSection &&
          selectedCategory &&
          productTranslations.ru.name.trim() &&
          productImages.length > 0
      ),
    [
      selectedSection,
      selectedCategory,
      productTranslations.ru.name,
      productImages.length,
    ]
  );
};

// ==================== –≠–ö–°–ü–û–†–¢ –î–ï–ô–°–¢–í–ò–ô ====================

export const useAdminCategoryActions = () => {
  const store = useAdminCategoryStore();

  return React.useMemo(
    () => ({
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      setSelectedSection: store.setSelectedSection,
      setSelectedCategory: store.setSelectedCategory,
      setSelectedSubcategory: store.setSelectedSubcategory,
      setSelectedBrand: store.setSelectedBrand,
      clearError: store.clearError,
      resetForm: store.resetForm,

      // –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
      setProductTranslation: store.setProductTranslation,
      setProductImage: store.setProductImage,
      removeProductImage: store.removeProductImage,
      setPrimaryProductImage: store.setPrimaryProductImage,
      reorderProductImages: store.reorderProductImages,
      createProduct: store.createProduct,
      setProductCreationError: store.setProductCreationError,
      clearProductCreationError: store.clearProductCreationError,
      resetProductData: store.resetProductData,
    }),
    [store]
  );
};
