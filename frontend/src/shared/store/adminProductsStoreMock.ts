import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import { ProductListItem } from '@/shared/types/product';

// ==================== –¢–ò–ü–´ ====================

interface ProductsListResponse {
  products: ProductListItem[];
  totalPages: number;
  totalProducts: number;
  currentPage: number;
}

interface AdminProductsState {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  products: ProductListItem[];
  totalPages: number;
  totalProducts: number;
  currentPage: number;
  isLoading: boolean;
  error: string;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  deletingProductIds: Set<string>;
  showDeleteConfirm: boolean;
  productToDelete: ProductListItem | null;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  temporaryMessage: string;
  isShowingTempMessage: boolean;

  // –î–µ–π—Å—Ç–≤–∏—è
  loadProducts: (page: number, section?: string) => Promise<void>;
  deleteProduct: (productId: string) => Promise<void>;
  setCurrentPage: (page: number) => void;
  setError: (error: string) => void;
  clearError: () => void;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏—è
  showDeleteConfirmation: (product: ProductListItem) => void;
  hideDeleteConfirmation: () => void;
  confirmDelete: () => Promise<void>;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  showTemporaryMessage: (message: string, duration?: number) => void;
  hideTemporaryMessage: () => void;
}

// ==================== –ú–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï ====================

const mockProducts: ProductListItem[] = [
  {
    id: '1',
    name: 'IP-—Ç–µ–ª–µ—Ñ–æ–Ω Grandstream GXP2140',
    description:
      '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π IP-—Ç–µ–ª–µ—Ñ–æ–Ω —Å 4-—Å—Ç—Ä–æ—á–Ω—ã–º –¥–∏—Å–ø–ª–µ–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 SIP –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    image: '/images/product-1-small.jpg',
    brand: { id: 1, name: 'Grandstream' },
  },
  {
    id: '2',
    name: 'IP-–∫–∞–º–µ—Ä–∞ Hikvision DS-2CD2143G0-I',
    description: '–ö—É–ø–æ–ª—å–Ω–∞—è IP-–∫–∞–º–µ—Ä–∞ 4MP —Å –ò–ö-–ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –¥–æ 30–º',
    image: '/images/product-2-small.jpg',
    brand: { id: 2, name: 'Hikvision' },
  },
  {
    id: '3',
    name: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä TP-Link TL-SG1008D',
    description: '8-–ø–æ—Ä—Ç–æ–≤—ã–π –≥–∏–≥–∞–±–∏—Ç–Ω—ã–π –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
    image: '/images/product-3-small.jpg',
    brand: { id: 3, name: 'TP-Link' },
  },
];

// –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ
const generateMockProducts = (count: number): ProductListItem[] => {
  const products: ProductListItem[] = [];
  const brands = [
    'Grandstream',
    'Hikvision',
    'TP-Link',
    'Ubiquiti',
    'MikroTik',
    'Cisco',
  ];
  const categories = [
    'IP-—Ç–µ–ª–µ—Ñ–æ–Ω—ã',
    'IP-–∫–∞–º–µ—Ä—ã',
    '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã',
    '–†–æ—É—Ç–µ—Ä—ã',
    '–¢–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞',
  ];

  for (let i = 4; i <= count + 3; i++) {
    const brand = brands[i % brands.length];
    const category = categories[i % categories.length];

    products.push({
      id: String(i),
      name: `${brand} Model-${i}XX`,
      description: `–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ${i} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`,
      image: `/images/product-${i}-small.jpg`,
      brand: { id: i, name: brand },
    });
  }

  return [...mockProducts, ...products];
};

const allMockProducts = generateMockProducts(50); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

// ==================== –ú–û–ö–û–í–´–ï API –§–£–ù–ö–¶–ò–ò ====================

const fetchProductsListMock = async (
  page: number,
  section?: string
): Promise<ProductsListResponse> => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise((resolve) => setTimeout(resolve, 1000));

  const limit = 12;
  const offset = (page - 1) * limit;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  let filteredProducts = allMockProducts;
  if (section) {
    filteredProducts = allMockProducts.filter((p) => p.section === section);
  }

  const products = filteredProducts.slice(offset, offset + limit);
  const totalProducts = filteredProducts.length;
  const totalPages = Math.ceil(totalProducts / limit);

  return {
    products,
    totalPages,
    totalProducts,
    currentPage: page,
  };
};

const deleteProductApiMock = async (productId: string): Promise<void> => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise((resolve) => setTimeout(resolve, 500));

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—à–∏–±–∫—É –≤ 10% —Å–ª—É—á–∞–µ–≤
  if (Math.random() < 0.1) {
    throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ)');
  }

  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const index = allMockProducts.findIndex((p) => p.id === productId);
  if (index !== -1) {
    allMockProducts.splice(index, 1);
  }
};

// ==================== ZUSTAND STORE ====================

export const useAdminProductsStore = create<AdminProductsState>()(
  subscribeWithSelector((set, get) => ({
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    products: [],
    totalPages: 0,
    totalProducts: 0,
    currentPage: 1,
    isLoading: false,
    error: '',

    deletingProductIds: new Set(),
    showDeleteConfirm: false,
    productToDelete: null,

    temporaryMessage: '',
    isShowingTempMessage: false,

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    loadProducts: async (page: number, section?: string) => {
      set({ isLoading: true, error: '' });

      try {
        const data = await fetchProductsListMock(page, section);

        set({
          products: data.products,
          totalPages: data.totalPages,
          totalProducts: data.totalProducts,
          currentPage: data.currentPage,
          isLoading: false,
        });

        console.log(
          `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`
        );
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

        set({
          isLoading: false,
          error: errorMessage,
        });

        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    deleteProduct: async (productId: string) => {
      const { deletingProductIds } = get();

      // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—è–µ–º—ã—Ö
      set({
        deletingProductIds: new Set([...deletingProductIds, productId]),
      });

      try {
        await deleteProductApiMock(productId);

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        const { products } = get();
        const updatedProducts = products.filter((p) => p.id !== productId);

        set({
          products: updatedProducts,
          deletingProductIds: new Set(
            [...deletingProductIds].filter((id) => id !== productId)
          ),
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        get().showTemporaryMessage('üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${productId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        // –£–±–∏—Ä–∞–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—è–µ–º—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
        set({
          deletingProductIds: new Set(
            [...deletingProductIds].filter((id) => id !== productId)
          ),
        });

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è';
        set({ error: errorMessage });

        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error);
      }
    },

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setCurrentPage: (page: number) => {
      set({ currentPage: page });
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏
    setError: (error: string) => {
      set({ error });
    },

    clearError: () => {
      set({ error: '' });
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏—è
    showDeleteConfirmation: (product: ProductListItem) => {
      set({
        showDeleteConfirm: true,
        productToDelete: product,
      });
    },

    hideDeleteConfirmation: () => {
      set({
        showDeleteConfirm: false,
        productToDelete: null,
      });
    },

    confirmDelete: async () => {
      const { productToDelete } = get();

      if (productToDelete) {
        await get().deleteProduct(productToDelete.id);
        get().hideDeleteConfirmation();
      }
    },

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    showTemporaryMessage: (message: string, duration = 3000) => {
      set({ temporaryMessage: message, isShowingTempMessage: true });

      setTimeout(() => {
        const currentState = get();
        currentState.hideTemporaryMessage();
      }, duration);
    },

    hideTemporaryMessage: () => {
      set({ temporaryMessage: '', isShowingTempMessage: false });
    },
  }))
);

// ==================== –•–£–ö–ò ====================

export const useProducts = () =>
  useAdminProductsStore((state) => state.products);
export const useTotalPages = () =>
  useAdminProductsStore((state) => state.totalPages);
export const useTotalProducts = () =>
  useAdminProductsStore((state) => state.totalProducts);
export const useCurrentPage = () =>
  useAdminProductsStore((state) => state.currentPage);
export const useIsLoading = () =>
  useAdminProductsStore((state) => state.isLoading);
export const useError = () => useAdminProductsStore((state) => state.error);

export const useDeletingProductIds = () =>
  useAdminProductsStore((state) => state.deletingProductIds);
export const useShowDeleteConfirm = () =>
  useAdminProductsStore((state) => state.showDeleteConfirm);
export const useProductToDelete = () =>
  useAdminProductsStore((state) => state.productToDelete);

export const useTemporaryMessage = () =>
  useAdminProductsStore((state) => state.temporaryMessage);
export const useIsShowingTempMessage = () =>
  useAdminProductsStore((state) => state.isShowingTempMessage);

export const useAdminProductsActions = () => {
  const store = useAdminProductsStore();

  return {
    loadProducts: store.loadProducts,
    deleteProduct: store.deleteProduct,
    setCurrentPage: store.setCurrentPage,
    setError: store.setError,
    clearError: store.clearError,
    showDeleteConfirmation: store.showDeleteConfirmation,
    hideDeleteConfirmation: store.hideDeleteConfirmation,
    confirmDelete: store.confirmDelete,
    showTemporaryMessage: store.showTemporaryMessage,
    hideTemporaryMessage: store.hideTemporaryMessage,
  };
};
