import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import { ProductDetail } from '@/shared/types/product';

// ==================== –¢–ò–ü–´ ====================

interface ProductsListResponse {
  products: ProductDetail[];
  totalPages: number;
  totalProducts: number;
  currentPage: number;
}

interface AdminProductsState {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  products: ProductDetail[];
  totalPages: number;
  totalProducts: number;
  currentPage: number;
  isLoading: boolean;
  error: string;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  deletingProductIds: Set<number>;
  showDeleteConfirm: boolean;
  productToDelete: ProductDetail | null;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  temporaryMessage: string;
  isShowingTempMessage: boolean;

  // –î–µ–π—Å—Ç–≤–∏—è
  loadProducts: (page: number, section?: string) => Promise<void>;
  deleteProduct: (productId: number) => Promise<void>;
  setCurrentPage: (page: number) => void;
  setError: (error: string) => void;
  clearError: () => void;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏—è
  showDeleteConfirmation: (product: ProductDetail) => void;
  hideDeleteConfirmation: () => void;
  confirmDelete: () => Promise<void>;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  showTemporaryMessage: (message: string, duration?: number) => void;
  hideTemporaryMessage: () => void;
}

// ==================== API –§–£–ù–ö–¶–ò–ò ====================

const fetchProductsList = async (
  page: number,
  section?: string
): Promise<ProductsListResponse> => {
  const params = new URLSearchParams({
    page: page.toString(),
    limit: '12', // –ö–∞–∫ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  });

  if (section) {
    params.append('section', section);
  }

  // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–µ–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
  const backendUrl =
    process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:4000';
  const response = await fetch(`${backendUrl}/api/admin/products?${params}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      // 'Authorization': `Bearer ${token}`,
    },
  });

  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${response.statusText}`);
  }

  const data = await response.json();

  if (!data.success) {
    throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
  }

  return data.data;
};

const deleteProductApi = async (productId: number): Promise<void> => {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–µ–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
  const backendUrl =
    process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:4000';
  const response = await fetch(
    `${backendUrl}/api/admin/products/${productId}`,
    {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        // 'Authorization': `Bearer ${token}`,
      },
    }
  );

  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${response.statusText}`);
  }

  const data = await response.json();

  if (!data.success) {
    throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
  }
};

// ==================== ZUSTAND STORE ====================

export const useAdminProductsStore = create<AdminProductsState>()(
  subscribeWithSelector((set, get) => ({
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    products: [],
    totalPages: 0,
    totalProducts: 0,
    currentPage: 1,
    isLoading: false,
    error: '',

    deletingProductIds: new Set(),
    showDeleteConfirm: false,
    productToDelete: null,

    temporaryMessage: '',
    isShowingTempMessage: false,

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    loadProducts: async (page: number, section?: string) => {
      set({ isLoading: true, error: '' });

      try {
        const data = await fetchProductsList(page, section);

        set({
          products: data.products,
          totalPages: data.totalPages,
          totalProducts: data.totalProducts,
          currentPage: data.currentPage,
          isLoading: false,
        });

        console.log(
          `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`
        );
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

        set({
          isLoading: false,
          error: errorMessage,
        });

        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    deleteProduct: async (productId: number) => {
      const { deletingProductIds } = get();

      // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—è–µ–º—ã—Ö
      set({
        deletingProductIds: new Set([...deletingProductIds, productId]),
      });

      try {
        await deleteProductApi(productId);

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        const { products } = get();
        const updatedProducts = products.filter((p) => p.id !== productId);

        set({
          products: updatedProducts,
          deletingProductIds: new Set(
            [...deletingProductIds].filter((id) => id !== productId)
          ),
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        get().showTemporaryMessage('üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${productId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        // –£–±–∏—Ä–∞–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—è–µ–º—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
        set({
          deletingProductIds: new Set(
            [...deletingProductIds].filter((id) => id !== productId)
          ),
        });

        const errorMessage =
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è';
        set({ error: errorMessage });

        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error);
      }
    },

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setCurrentPage: (page: number) => {
      set({ currentPage: page });
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏
    setError: (error: string) => {
      set({ error });
    },

    clearError: () => {
      set({ error: '' });
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏—è
    showDeleteConfirmation: (product: ProductDetail) => {
      set({
        showDeleteConfirm: true,
        productToDelete: product,
      });
    },

    hideDeleteConfirmation: () => {
      set({
        showDeleteConfirm: false,
        productToDelete: null,
      });
    },

    confirmDelete: async () => {
      const { productToDelete } = get();

      if (productToDelete) {
        await get().deleteProduct(productToDelete.id);
        get().hideDeleteConfirmation();
      }
    },

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    showTemporaryMessage: (message: string, duration = 3000) => {
      set({ temporaryMessage: message, isShowingTempMessage: true });

      setTimeout(() => {
        const currentState = get();
        currentState.hideTemporaryMessage();
      }, duration);
    },

    hideTemporaryMessage: () => {
      set({ temporaryMessage: '', isShowingTempMessage: false });
    },
  }))
);

// ==================== –•–£–ö–ò ====================

export const useProducts = () =>
  useAdminProductsStore((state) => state.products);
export const useTotalPages = () =>
  useAdminProductsStore((state) => state.totalPages);
export const useTotalProducts = () =>
  useAdminProductsStore((state) => state.totalProducts);
export const useCurrentPage = () =>
  useAdminProductsStore((state) => state.currentPage);
export const useIsLoading = () =>
  useAdminProductsStore((state) => state.isLoading);
export const useError = () => useAdminProductsStore((state) => state.error);

export const useDeletingProductIds = () =>
  useAdminProductsStore((state) => state.deletingProductIds);
export const useShowDeleteConfirm = () =>
  useAdminProductsStore((state) => state.showDeleteConfirm);
export const useProductToDelete = () =>
  useAdminProductsStore((state) => state.productToDelete);

export const useTemporaryMessage = () =>
  useAdminProductsStore((state) => state.temporaryMessage);
export const useIsShowingTempMessage = () =>
  useAdminProductsStore((state) => state.isShowingTempMessage);

export const useAdminProductsActions = () => {
  const store = useAdminProductsStore();

  return {
    loadProducts: store.loadProducts,
    deleteProduct: store.deleteProduct,
    setCurrentPage: store.setCurrentPage,
    setError: store.setError,
    clearError: store.clearError,
    showDeleteConfirmation: store.showDeleteConfirmation,
    hideDeleteConfirmation: store.hideDeleteConfirmation,
    confirmDelete: store.confirmDelete,
    showTemporaryMessage: store.showTemporaryMessage,
    hideTemporaryMessage: store.hideTemporaryMessage,
  };
};
