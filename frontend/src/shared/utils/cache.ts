// shared/utils/cache.ts
// –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ App Router
// import { revalidateTag, revalidatePath } from 'next/cache';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º Next.js ISR
 */

export interface RevalidateOptions {
  readonly tags?: readonly string[];
  readonly paths?: readonly string[];
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ —Ç–µ–≥–∞–º –∏ –ø—É—Ç—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
 */
export async function invalidateCache(
  options: RevalidateOptions
): Promise<void> {
  try {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö App Router
    if (typeof window === 'undefined') {
      const { revalidateTag, revalidatePath } = await import('next/cache');

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
      if (options.tags) {
        for (const tag of options.tags) {
          revalidateTag(tag);
          console.log(`üóëÔ∏è Revalidated tag: ${tag}`);
        }
      }

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø—É—Ç—è–º
      if (options.paths) {
        for (const path of options.paths) {
          revalidatePath(path);
          console.log(`üóëÔ∏è Revalidated path: ${path}`);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è Cache invalidation only works in server components');
    }
  } catch (error) {
    console.error('‚ùå Cache invalidation failed:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export function createProductTags(
  productId: string | number,
  locale: string
): readonly string[] {
  return [
    `product-${productId}`,
    `locale-${locale}`,
    'products',
    'all-products',
  ] as const;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function createCategoryTags(
  categoryId: string | number,
  locale: string,
  section?: string
): readonly string[] {
  const tags = [
    `category-${categoryId}`,
    `locale-${locale}`,
    'categories',
    'all-categories',
  ];

  if (section) {
    tags.push(`section-${section}`);
  }

  return tags as const;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–≥–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞
 */
export function createBrandTags(
  brandId: string | number,
  locale: string
): readonly string[] {
  return [
    `brand-${brandId}`,
    `locale-${locale}`,
    'brands',
    'all-brands',
  ] as const;
}

/**
 * –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
export const CACHE_SETTINGS = {
  // –ü—Ä–æ–¥—É–∫—Ç—ã - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–¥–∫–æ
  PRODUCT_DETAIL: {
    revalidate: 1800, // 30 –º–∏–Ω—É—Ç
    tags: ['products'],
  },

  // –°–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–∞—â–µ
  PRODUCT_LIST: {
    revalidate: 600, // 10 –º–∏–Ω—É—Ç
    tags: ['products', 'all-products'],
  },

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω—ã
  CATEGORIES: {
    revalidate: 3600, // 1 —á–∞—Å
    tags: ['categories', 'all-categories'],
  },

  // –ë—Ä–µ–Ω–¥—ã - –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω—ã
  BRANDS: {
    revalidate: 3600, // 1 —á–∞—Å
    tags: ['brands', 'all-brands'],
  },

  // –ü–æ–∏—Å–∫ - –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è
  SEARCH: {
    revalidate: 300, // 5 –º–∏–Ω—É—Ç
    tags: ['search'],
  },

  // –ú–µ–Ω—é - –∫—Ä–∞–π–Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
  MENU: {
    revalidate: 7200, // 2 —á–∞—Å–∞
    tags: ['menu', 'navigation'],
  },
} as const;

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è fetch —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function fetchWithCache<T>(
  url: string,
  options: {
    readonly revalidate?: number;
    readonly tags?: readonly string[];
    readonly headers?: Record<string, string>;
  } = {}
): Promise<T> {
  const { revalidate = 300, tags = [], headers = {} } = options;

  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...headers,
    },
    next: {
      revalidate,
      tags: Array.from(tags),
    },
  });

  if (!response.ok) {
    throw new Error(
      `Fetch failed: ${response.status} - ${response.statusText}`
    );
  }

  return response.json();
}
