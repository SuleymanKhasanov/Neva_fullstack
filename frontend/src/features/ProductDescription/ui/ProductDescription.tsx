// frontend/src/features/ProductDescription/ui/ProductDescription.tsx
'use client';

import { useState } from 'react';
import { LuType } from 'react-icons/lu';
import styles from './ProductDescription.module.css';

interface ProductDescriptionProps {
  description: string;
  errors: Record<string, string>;
  onUpdate: (description: string) => void;
}

const ProductDescription = ({
  description,
  errors,
  onUpdate,
}: ProductDescriptionProps) => {
  const [isFocused, setIsFocused] = useState(false);

  const charCount = description.length;
  const minLength = 20;
  const maxLength = 2000;
  const isValid = charCount >= minLength && charCount <= maxLength;

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <label className={styles.label}>
          <LuType className={styles.labelIcon} />
          –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ <span className={styles.required}>*</span>
        </label>
        <div className={styles.counter}>
          <span className={`${styles.count} ${!isValid ? styles.invalid : ''}`}>
            {charCount}
          </span>
          <span className={styles.maxCount}>/ {maxLength}</span>
        </div>
      </div>

      <div
        className={`${styles.textareaContainer} ${isFocused ? styles.focused : ''} ${errors.description ? styles.error : ''}`}
      >
        <textarea
          className={styles.textarea}
          value={description}
          onChange={(e) => onUpdate(e.target.value)}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...

–ü—Ä–∏–º–µ—Ä:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏"
          maxLength={maxLength}
          rows={8}
        />
      </div>

      <div className={styles.hints}>
        <div className={styles.progressBar}>
          <div
            className={styles.progressFill}
            style={{
              width: `${Math.min((charCount / minLength) * 100, 100)}%`,
              backgroundColor:
                charCount >= minLength ? 'var(--primary)' : '#ffa500',
            }}
          />
        </div>

        <div className={styles.hintText}>
          {charCount < minLength ? (
            <span className={styles.warning}>
              –ú–∏–Ω–∏–º—É–º {minLength} —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å: {minLength - charCount})
            </span>
          ) : (
            <span className={styles.success}>
              ‚úì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–ª–∏–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            </span>
          )}
        </div>
      </div>

      {errors.description && (
        <div className={styles.errorMessage}>{errors.description}</div>
      )}

      <div className={styles.tips}>
        <h4 className={styles.tipsTitle}>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</h4>
        <ul className={styles.tipsList}>
          <li>–û–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</li>
          <li>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏</li>
          <li>–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</li>
          <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã</li>
        </ul>
      </div>
    </div>
  );
};

export default ProductDescription;
