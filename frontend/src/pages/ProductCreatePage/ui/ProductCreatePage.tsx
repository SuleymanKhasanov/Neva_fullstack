// frontend/src/pages/ProductCreatePage/ui/ProductCreatePage.tsx
'use client';

import React, { useMemo } from 'react';
import styles from './ProductCreatePage.module.css';
import { AdminCreateCategory } from '@/widgets/AdminCreateCategory';
import { TranslationKeys } from '@/shared/config/i18n/types';
import { useTranslations } from 'next-intl';
import { ProductImagesUpload } from '@/widgets/ProductImagesUpload';
import { ProductDetails } from '@/widgets/ProductDetails';
import {
  useSelectedSection,
  useSelectedCategory,
  useProductTranslations,
  useProductImages,
  useAdminCategoryActions,
  useIsCreatingProduct,
  useProductCreationError,
  useIsFormValid,
} from '@/shared/store/adminCategoryStore';

const ProductCreatePage = () => {
  const t = useTranslations();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ zustand store
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const productTranslations = useProductTranslations();
  const productImages = useProductImages();
  const isCreatingProduct = useIsCreatingProduct();
  const productCreationError = useProductCreationError();
  const isFormValid = useIsFormValid();

  // –î–µ–π—Å—Ç–≤–∏—è
  const { createProduct, resetForm, clearProductCreationError } =
    useAdminCategoryActions();

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const progress = useMemo(() => {
    const fields = [
      Boolean(selectedSection), // –°–µ–∫—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
      Boolean(selectedCategory), // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
      Boolean(productTranslations.ru.name.trim()), // –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
      Boolean(productTranslations.ru.description.trim()), // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
      productImages.length > 0, // –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ];

    const filled = fields.filter(Boolean).length;
    const total = fields.length;
    const percentage = Math.round((filled / total) * 100);

    return { filled, total, percentage };
  }, [selectedSection, selectedCategory, productTranslations, productImages]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleSubmit = async () => {
    if (!isFormValid) {
      console.warn('‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞');
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    clearProductCreationError();

    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...');
      const success = await createProduct();

      if (success) {
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        alert('üéâ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      } else {
        console.error('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
  const handleReset = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
      resetForm();
      console.log('üîÑ –§–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>
          {t(TranslationKeys.ProductCreateTitle)}
        </h1>
        <p className={styles.subtitle}>
          {t(TranslationKeys.ProductCreateSubtitle)}
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      <AdminCreateCategory />
      <ProductImagesUpload />
      <ProductDetails />

      {/* –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –î–ï–ô–°–¢–í–ò–ô */}
      <div className={styles.actionPanel}>
        <div className={styles.progressSection}>
          <div className={styles.progressInfo}>
            <h3 className={styles.progressTitle}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
            <div className={styles.progressDetails}>
              <span className={styles.percentage}>{progress.percentage}%</span>
              <span className={styles.details}>
                {progress.filled} –∏–∑ {progress.total} –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
              </span>
            </div>
          </div>

          <div className={styles.progressBar}>
            <div
              className={styles.progressFill}
              style={{ width: `${progress.percentage}%` }}
            />
          </div>

          {!isFormValid && (
            <div className={styles.statusMessage}>
              ‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            </div>
          )}

          {isFormValid && (
            <div className={styles.completeMessage}>
              ‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.actions}>
          <button
            type="button"
            onClick={handleReset}
            className={styles.resetButton}
            disabled={isCreatingProduct}
          >
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
          </button>

          <button
            type="button"
            onClick={handleSubmit}
            className={`${styles.submitButton} ${
              isFormValid ? styles.complete : styles.incomplete
            }`}
            disabled={isCreatingProduct || !isFormValid}
          >
            {isCreatingProduct ? (
              <>
                <span className={styles.spinner} />
                –°–æ–∑–¥–∞–Ω–∏–µ...
              </>
            ) : (
              <>
                {isFormValid ? '‚úÖ ' : '‚ùå '}
                –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
              </>
            )}
          </button>
        </div>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
      {productCreationError && (
        <div className={styles.errorMessage}>
          <span className={styles.errorIcon}>‚ö†Ô∏è</span>
          <span>{productCreationError}</span>
          <button
            className={styles.closeError}
            onClick={clearProductCreationError}
          >
            ‚úï
          </button>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <details className={styles.debugInfo}>
        <summary>üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
        <pre className={styles.debugData}>
          {JSON.stringify(
            {
              selectedSection,
              selectedCategory,
              hasImages: productImages.length,
              hasRuName: Boolean(productTranslations.ru.name.trim()),
              hasRuDescription: Boolean(
                productTranslations.ru.description.trim()
              ),
              isFormValid,
              isCreatingProduct,
              progress,
            },
            null,
            2
          )}
        </pre>
      </details>
    </div>
  );
};

export default ProductCreatePage;
