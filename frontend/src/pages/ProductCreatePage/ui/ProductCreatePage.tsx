// frontend/src/pages/ProductCreatePage/ui/ProductCreatePage.tsx
'use client';

import React, { useMemo } from 'react';
import styles from './ProductCreatePage.module.css';
import { AdminCreateCategory } from '@/widgets/AdminCreateCategory';
import { TranslationKeys } from '@/shared/config/i18n/types';
import { useTranslations } from 'next-intl';
import { ProductImagesUpload } from '@/widgets/ProductImagesUpload';
import { ProductDetails } from '@/widgets/ProductDetails';
import { ProductFormProgress } from '@/widgets/ProductFormProgress';
import {
  useSelectedSection,
  useSelectedCategory,
  useSelectedSubcategory,
  useSelectedBrand,
  useProductTranslations,
  useProductImages,
  useAdminCategoryActions,
  useIsCreatingProduct,
  useProductCreationError,
  useIsFormValid,
  useTemporaryMessage,
  useShowTemporaryMessage,
} from '@/shared/store/adminCategoryStore';

const ProductCreatePage = () => {
  const t = useTranslations();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ zustand store
  const selectedSection = useSelectedSection();
  const selectedCategory = useSelectedCategory();
  const selectedSubcategory = useSelectedSubcategory();
  const selectedBrand = useSelectedBrand();
  const productTranslations = useProductTranslations();
  const productImages = useProductImages();
  const isCreatingProduct = useIsCreatingProduct();
  const productCreationError = useProductCreationError();
  const isFormValid = useIsFormValid();
  const temporaryMessage = useTemporaryMessage();
  const isShowingTemporaryMessage = useShowTemporaryMessage();

  // –î–µ–π—Å—Ç–≤–∏—è
  const {
    createProduct,
    resetForm,
    clearProductCreationError,
    showTemporaryMessage,
  } = useAdminCategoryActions();

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const progress = useMemo(() => {
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ä–º—ã: 17 –ø–æ–ª–µ–π = 100%
    const fields = [
      // 4 –ø–æ–ª—è –≤—ã–±–æ—Ä–∞
      Boolean(selectedSection), // –°–µ–∫—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
      Boolean(selectedCategory), // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
      Boolean(selectedSubcategory), // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
      Boolean(selectedBrand), // –ë—Ä–µ–Ω–¥ –≤—ã–±—Ä–∞–Ω

      // 1 –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      productImages.length > 0, // –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

      // 4 –ø–æ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π (ru, en, uz, kr)
      Boolean(productTranslations.ru.name.trim()),
      Boolean(productTranslations.en.name.trim()),
      Boolean(productTranslations.uz.name.trim()),
      Boolean(productTranslations.kr.name.trim()),

      // 4 –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π (ru, en, uz, kr)
      Boolean(productTranslations.ru.description.trim()),
      Boolean(productTranslations.en.description.trim()),
      Boolean(productTranslations.uz.description.trim()),
      Boolean(productTranslations.kr.description.trim()),

      // 4 –ø–æ–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π (ru, en, uz, kr)
      Boolean(productTranslations.ru.specifications.trim()),
      Boolean(productTranslations.en.specifications.trim()),
      Boolean(productTranslations.uz.specifications.trim()),
      Boolean(productTranslations.kr.specifications.trim()),
    ];

    const filled = fields.filter(Boolean).length;
    const total = fields.length;
    const percentage = Math.round((filled / total) * 100);

    return {
      filled,
      total,
      percentage,
      additionalFilled: 0,
      totalAdditional: 0,
      hasAllLanguages: filled === total,
    };
  }, [
    selectedSection,
    selectedCategory,
    selectedSubcategory,
    selectedBrand,
    productTranslations,
    productImages,
  ]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleSubmit = async () => {
    if (!isFormValid) {
      console.warn('‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞');
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    clearProductCreationError();

    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...');
      const success = await createProduct();

      if (success) {
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        showTemporaryMessage(
          t(TranslationKeys.ProgressIndicatorSuccessMessage)
        );
      } else {
        console.error('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
  const handleReset = () => {
    resetForm();
    showTemporaryMessage(t(TranslationKeys.ProgressIndicatorResetMessage));
    console.log('üîÑ –§–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>
          {t(TranslationKeys.ProductCreateTitle)}
        </h1>
        <p className={styles.subtitle}>
          {t(TranslationKeys.ProductCreateSubtitle)}
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      <AdminCreateCategory />
      <ProductImagesUpload />
      <ProductDetails />

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π */}
      <ProductFormProgress
        progress={progress}
        isFormValid={isFormValid}
        isCreatingProduct={isCreatingProduct}
        productCreationError={productCreationError}
        temporaryMessage={temporaryMessage}
        showTemporaryMessage={isShowingTemporaryMessage}
        onSubmit={handleSubmit}
        onReset={handleReset}
        onClearError={clearProductCreationError}
      />
    </div>
  );
};

export default ProductCreatePage;
