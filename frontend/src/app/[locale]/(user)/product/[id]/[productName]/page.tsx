import { notFound, redirect } from 'next/navigation';
import { getRequestConfig } from '@/shared/config/i18n/i18n';
import {
  isValidLocale,
  Locale,
  TranslationType,
} from '@/shared/config/i18n/types';
import {
  getProductById,
  getAllProductPaths,
  validateSlug,
} from '@/shared/services/api/product';
import { ProductDetail, ProductPath } from '@/shared/types/product';
import dynamic from 'next/dynamic';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ProductDetailPage –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const ProductDetailPage = dynamic(
  () =>
    import('@/pages/ProductDetailPage').then((mod) => ({
      default: mod.ProductDetailPage,
    })),
  {
    loading: () => (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞...</p>
        </div>
      </div>
    ),
  }
);
import { createProductMetadata } from '@/shared/types/metadata';

interface ProductPageProps {
  params: Promise<{
    locale: string;
    id: string;
    productName: string;
  }>;
}

export default async function ProductPage({ params }: ProductPageProps) {
  const resolvedParams = await params;
  const locale: Locale = isValidLocale(resolvedParams.locale)
    ? resolvedParams.locale
    : 'en';

  console.log('üìÑ ProductPage:', {
    locale,
    productId: resolvedParams.id,
    productName: resolvedParams.productName,
  });

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
  const product: ProductDetail | null = await getProductById(
    resolvedParams.id,
    locale
  );

  if (!product) {
    console.log('‚ùå Product not found in page:', resolvedParams.id);
    notFound();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å slug –≤ URL (–∏—Å–ø–æ–ª—å–∑—É–µ–º slug –∏–∑ API)
  const isValidSlugMatch = validateSlug(
    product.slug,
    resolvedParams.productName
  );

  if (!isValidSlugMatch) {
    console.log('üîÑ Invalid slug, redirecting:', {
      current: resolvedParams.productName,
      expected: product.slug,
    });

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å slug –∏–∑ API –≤ –≥—Ä—É–ø–ø–µ user
    redirect(`/${locale}/product/${resolvedParams.id}/${product.slug}`);
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
  const { messages }: { messages: TranslationType } = await getRequestConfig({
    locale,
  });

  console.log('‚úÖ ProductPage rendered for:', product.name);

  return (
    <ProductDetailPage product={product} locale={locale} messages={messages} />
  );
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ISR
export async function generateStaticParams(): Promise<
  {
    locale: string;
    id: string;
    productName: string;
  }[]
> {
  console.log('üèóÔ∏è Generating static params for products...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const allPaths: ProductPath[] = await getAllProductPaths();

    console.log(`üìä Generated ${allPaths.length} static paths`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const params = allPaths
      .filter(({ slug }) => slug && slug.trim().length > 0) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ slug
      .map(({ locale, id, slug }) => ({
        locale,
        id,
        productName: slug,
      }));

    console.log(
      `üìä Generated ${params.length} valid static paths from ${allPaths.length} products`
    );
    return params;
  } catch (error) {
    console.error('üí• Error generating static params:', error);
    return [];
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ISR
export const revalidate = 3600; // Revalidate –∫–∞–∂–¥—ã–π —á–∞—Å
export const dynamicParams = true; // –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
export const fetchCache = 'default-cache';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export async function generateMetadata({
  params,
}: {
  params: Promise<{ locale: string; id: string; productName: string }>;
}) {
  const resolvedParams = await params;
  const locale = isValidLocale(resolvedParams.locale)
    ? resolvedParams.locale
    : 'en';

  const product: ProductDetail | null = await getProductById(
    resolvedParams.id,
    locale
  );

  if (!product) {
    return {
      title: 'Product Not Found',
      description: 'The requested product could not be found.',
      robots: {
        index: false,
        follow: false,
      },
    };
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ –∏–∑ API
  const title =
    product.metaTitle || `${product.name} - ${product.brand.name} | Neva App`;
  const description =
    product.metaDescription ||
    (product.description.length > 160
      ? `${product.description.substring(0, 157)}...`
      : product.description);

  const canonicalUrl = `/${locale}/product/${product.id}/${product.slug}`;

  return createProductMetadata({
    title,
    description,
    imageUrl: product.images?.[0]?.large || '',
    canonicalUrl,
    locale,
    keywords: [
      product.name,
      product.brand.name,
      product.category.name,
      'products',
      'neva',
      locale === 'ru' ? '—Ç–æ–≤–∞—Ä—ã' : 'products',
    ].filter(Boolean),
    brandName: product.brand.name,
    categoryName: product.category.name,
  });
}
