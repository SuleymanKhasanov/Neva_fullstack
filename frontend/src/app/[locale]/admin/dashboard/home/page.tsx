// frontend/src/app/[locale]/admin/dashboard/home/page.tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import { AdminRouteGuard } from '@/shared/components/AdminRouteGuard';
import { useAuth } from '@/shared/contexts/AuthContext';
import { useAdminApi } from '@/shared/hooks/useAdminApi';
import styles from './page.module.css';

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
interface LocalSystemStats {
  products: {
    total: number;
    active: number;
    bySection: Record<string, number>;
  };
  categories: {
    total: number;
    active: number;
    bySection: Record<string, number>;
  };
  brands: {
    total: number;
    active: number;
    bySection: Record<string, number>;
  };
}

interface LocalCacheStats {
  connected: boolean;
  keyCount: number;
  memoryUsage: {
    used: number;
    total: number;
    percentage: number;
  };
  hitRate: number;
  operationsPerSecond: number;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
interface StatCardProps {
  title: string;
  value: string | number;
  description: string;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  isLoading?: boolean;
}

const StatCard: React.FC<StatCardProps> = ({
  title,
  value,
  description,
  trend,
  isLoading = false,
}) => (
  <div className={styles.card}>
    <h3 className={styles.cardTitle}>{title}</h3>
    <p className={styles.cardDescription}>{description}</p>
    {isLoading ? (
      <div className={styles.loading}>
        <div className={styles.loadingSpinner}></div>
        <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
      </div>
    ) : (
      <div className={styles.cardStats}>
        <span className={styles.statsNumber}>{value}</span>
        {trend && (
          <span
            className={`${styles.trend} ${trend.isPositive ? styles.trendPositive : styles.trendNegative}`}
          >
            {trend.isPositive ? '‚Üó' : '‚Üò'} {Math.abs(trend.value)}%
          </span>
        )}
      </div>
    )}
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
const DashboardContent: React.FC = () => {
  const { user } = useAuth();
  const { adminApi, isAuthenticated } = useAdminApi();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [systemStats, setSystemStats] = useState<LocalSystemStats | null>(null);
  const [cacheStats, setCacheStats] = useState<LocalCacheStats | null>(null);
  const [isInitialLoading, setIsInitialLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [apiAvailable, setApiAvailable] = useState<boolean>(false);

  // –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  const hasLoadedOnce = useRef<boolean>(false);
  const isLoadingRef = useRef<boolean>(false);

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  const getMockStats = (): {
    system: LocalSystemStats;
    cache: LocalCacheStats;
  } => ({
    system: {
      products: {
        total: 1234,
        active: 1156,
        bySection: { NEVA: 800, X_SOLUTION: 434 },
      },
      categories: {
        total: 42,
        active: 38,
        bySection: { NEVA: 25, X_SOLUTION: 17 },
      },
      brands: {
        total: 156,
        active: 142,
        bySection: { NEVA: 89, X_SOLUTION: 67 },
      },
    },
    cache: {
      connected: true,
      keyCount: 2547,
      memoryUsage: { used: 67108864, total: 134217728, percentage: 50 },
      hitRate: 0.94,
      operationsPerSecond: 125,
    },
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  const checkApiHealth = async (): Promise<boolean> => {
    try {
      console.log('üîç Checking API health...');

      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 —Å–µ–∫—É–Ω–¥—ã

      try {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å health check
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'}/`,
          {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
            signal: controller.signal,
          }
        );

        clearTimeout(timeoutId);
        const isHealthy = response.ok;
        console.log(
          `${isHealthy ? '‚úÖ' : '‚ùå'} API health check:`,
          response.status
        );
        return isHealthy;
      } catch (fetchError) {
        clearTimeout(timeoutId);
        throw fetchError;
      }
    } catch (error) {
      console.log('‚ùå API health check failed:', error);
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const getCurrentTime = (): string => {
    return new Date().toLocaleString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å fallback
  useEffect(() => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (isLoadingRef.current) {
      console.log('‚è© Already loading, skipping...');
      return;
    }

    const loadStats = async (): Promise<void> => {
      isLoadingRef.current = true;

      try {
        console.log('üìä Loading dashboard statistics...');

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loader
        if (!hasLoadedOnce.current) {
          setIsInitialLoading(true);
        }
        setError(null);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        const apiHealthy = await checkApiHealth();
        setApiAvailable(apiHealthy);

        if (!apiHealthy || !isAuthenticated) {
          console.log(
            '‚ö†Ô∏è API unavailable or user not authenticated, using mock data'
          );
          const mockData = getMockStats();
          setSystemStats(mockData.system);
          setCacheStats(mockData.cache);
          setError(
            apiHealthy ? null : 'API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.'
          );
          hasLoadedOnce.current = true;
          return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–Ω–æ
        console.log('üåê Attempting to load real statistics...');

        const [systemResponse, cacheResponse] = await Promise.allSettled([
          adminApi.system.getStats(),
          adminApi.cache.getStats(),
        ]);

        let hasRealData = false;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (
          systemResponse.status === 'fulfilled' &&
          systemResponse.value.success
        ) {
          console.log('‚úÖ System stats loaded successfully');
          setSystemStats(systemResponse.value.data as LocalSystemStats);
          hasRealData = true;
        } else {
          console.log('‚ö†Ô∏è System stats failed, using mock data');
          setSystemStats(getMockStats().system);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
        if (
          cacheResponse.status === 'fulfilled' &&
          cacheResponse.value.success
        ) {
          console.log('‚úÖ Cache stats loaded successfully');
          setCacheStats(cacheResponse.value.data as LocalCacheStats);
          hasRealData = true;
        } else {
          console.log('‚ö†Ô∏è Cache stats failed, using mock data');
          setCacheStats(getMockStats().cache);
        }

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (!hasRealData) {
          setError(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.'
          );
        }

        hasLoadedOnce.current = true;
      } catch (err) {
        console.error('üí• Error loading dashboard stats:', err);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        const mockData = getMockStats();
        setSystemStats(mockData.system);
        setCacheStats(mockData.cache);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.');
        hasLoadedOnce.current = true;
      } finally {
        setIsInitialLoading(false);
        isLoadingRef.current = false;
        console.log('üèÅ Dashboard statistics loading completed');
      }
    };

    loadStats();
  }, [adminApi, isAuthenticated]); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏

  return (
    <div className={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className={styles.header}>
        <h1 className={styles.title}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
        <p className={styles.subtitle}>
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π
        </p>
      </div>

      <div className={styles.content}>
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è */}
        <div className={styles.welcomeCard}>
          <h2 className={styles.welcome}>–ü—Ä–∏–≤–µ—Ç, {user?.username}! üëã</h2>
          <p className={styles.description}>
            –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. <br />
            {apiAvailable
              ? '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.'
              : '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'}
          </p>
          <div className={styles.userInfo}>
            <div className={styles.infoItem}>
              <span className={styles.infoLabel}>–†–æ–ª—å:</span>
              <span className={styles.infoValue}>{user?.role}</span>
            </div>
            <div className={styles.infoItem}>
              <span className={styles.infoLabel}>–í—Ä–µ–º—è –≤—Ö–æ–¥–∞:</span>
              <span className={styles.infoValue}>{getCurrentTime()}</span>
            </div>
            <div className={styles.infoItem}>
              <span className={styles.infoLabel}>–°—Ç–∞—Ç—É—Å API:</span>
              <span className={styles.infoValue}>
                {isInitialLoading
                  ? '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...'
                  : apiAvailable
                    ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω'
                    : '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
              </span>
            </div>
            <div className={styles.infoItem}>
              <span className={styles.infoLabel}>–†–µ–∂–∏–º:</span>
              <span className={styles.infoValue}>
                {apiAvailable ? '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π' : '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π'}
              </span>
            </div>
          </div>
        </div>

        {/* –°–µ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <div className={styles.grid}>
          {/* –ü—Ä–æ–¥—É–∫—Ç—ã */}
          <StatCard
            title="–ü—Ä–æ–¥—É–∫—Ç—ã"
            value={systemStats?.products.total || 0}
            description={`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${systemStats?.products.active || 0}`}
            isLoading={isInitialLoading && !systemStats}
          />

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <StatCard
            title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
            value={systemStats?.categories.total || 0}
            description={`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${systemStats?.categories.active || 0}`}
            isLoading={isInitialLoading && !systemStats}
          />

          {/* –ë—Ä–µ–Ω–¥—ã */}
          <StatCard
            title="–ë—Ä–µ–Ω–¥—ã"
            value={systemStats?.brands.total || 0}
            description={`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${systemStats?.brands.active || 0}`}
            isLoading={isInitialLoading && !systemStats}
          />

          {/* –ö–µ—à */}
          <StatCard
            title="–ö–µ—à"
            value={
              cacheStats?.hitRate
                ? `${Math.round(cacheStats.hitRate * 100)}%`
                : 'N/A'
            }
            description={
              cacheStats?.connected
                ? '–ü–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'
                : '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...'
            }
            isLoading={isInitialLoading && !cacheStats}
          />
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ */}
        {cacheStats && (
          <div className={styles.cacheDetails}>
            <h3 className={styles.sectionTitle}>
              –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞ {!apiAvailable && '(–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)'}
            </h3>
            <div className={styles.cacheGrid}>
              <div className={styles.cacheItem}>
                <span className={styles.cacheLabel}>–°—Ç–∞—Ç—É—Å:</span>
                <span className={styles.cacheValue}>
                  {cacheStats.connected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
                </span>
              </div>
              <div className={styles.cacheItem}>
                <span className={styles.cacheLabel}>–ö–ª—é—á–µ–π –≤ –∫–µ—à–µ:</span>
                <span className={styles.cacheValue}>
                  {cacheStats.keyCount.toLocaleString()}
                </span>
              </div>
              <div className={styles.cacheItem}>
                <span className={styles.cacheLabel}>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</span>
                <span className={styles.cacheValue}>
                  {Math.round(cacheStats.memoryUsage.percentage)}% (
                  {(cacheStats.memoryUsage.used / 1024 / 1024).toFixed(1)} MB)
                </span>
              </div>
              <div className={styles.cacheItem}>
                <span className={styles.cacheLabel}>Hit Rate:</span>
                <span className={styles.cacheValue}>
                  {Math.round(cacheStats.hitRate * 100)}%
                </span>
              </div>
              <div className={styles.cacheItem}>
                <span className={styles.cacheLabel}>–û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫:</span>
                <span className={styles.cacheValue}>
                  {cacheStats.operationsPerSecond}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏ */}
        {error && (
          <div className={styles.warningCard}>
            <h3>‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h3>
            <p>{error}</p>
            {!apiAvailable && (
              <div className={styles.troubleshooting}>
                <h4>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h4>
                <ul>
                  <li>–ë–µ–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç 3000)</li>
                  <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º</li>
                  <li>CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã</li>
                  <li>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è URL API</li>
                </ul>
                <p>
                  <strong>–¢–µ–∫—É—â–∏–π API URL:</strong>{' '}
                  {process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'}
                </p>
              </div>
            )}
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ */}
        {!apiAvailable && !error && (
          <div className={styles.demoCard}>
            <h3>üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</h3>
            <p>
              –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏
              –¥–∞–Ω–Ω—ã–º–∏. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–µ–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä
              –∑–∞–ø—É—â–µ–Ω.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞—â–∏—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç–∞
const AdminDashboardHomePage: React.FC = () => {
  return (
    <AdminRouteGuard redirectTo="admin">
      <DashboardContent />
    </AdminRouteGuard>
  );
};

export default AdminDashboardHomePage;
